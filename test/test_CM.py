# −*− coding: UTF−8 −*−
#/**
# * Software Name : CryptoMobile 
# * Version : 0.3
# *
# * Copyright 2013. Benoit Michau. ANSSI.
# *
# * This program is free software: you can redistribute it and/or modify
# * it under the terms of the GNU General Public License version 2 as published
# * by the Free Software Foundation. 
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details. 
# *
# * You will find a copy of the terms and conditions of the GNU General Public
# * License version 2 in the "license.txt" file or
# * see http://www.gnu.org/licenses/ or write to the Free Software Foundation,
# * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
# *
# *--------------------------------------------------------
# * File Name : test/test_CM.py
# * Created : 2013-07-13
# * Authors : Benoit Michau 
# *--------------------------------------------------------
#*/

########################################################
# CryptoMobile python toolkit
#
# Interfaces C implementation of reference mobile cryptographic algorithms 
# to python primitives
# WARNING: mobile crypto algorithms specifications are freely available on the web, 
# but generally require license to be used in field equipments
#
# C source code from 3GPP / ETSI / GSMA / NIST web pages:
# - Kasumi (UEA1, UIA1)
# - SNOW3G (UEA2, UIA2, EEA1, EIA1)
# - ZUC (EEA3, EIA3)
# - AES (EEA2, EIA2) - from pycrypto
#######################################################

from time import time

from CryptoMobile.CM import KASUMI, SNOW3G, ZUC
try:
    from CryptoMobile.CM import EEA2
except ImportError:
    _with_aes = False
else:
    from CryptoMobile.CM import AES_3GPP
    _with_aes = True


###
# Kasumi, F8, F9: testsets from 3GPP TS 35.203 Rel.10
###

def kasumi_testset_1():
    kas     = KASUMI()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    input   = b'\xea\x02G\x14\xad\\M\x84'
    output  = b'\xdf\x1f\x9b%\x1c\x0b\xf4_'
    kas._initialize(key)
    return kas._cipher_block(input) == output

def kasumi_testset_2():
    kas     = KASUMI()
    key     = b'\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdcf\xb1\xf3'
    input   = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c'
    output  = b'\xdeU\x19\x88\xce\xb2\xf9\xb7'
    kas._initialize(key)
    return kas._cipher_block(input) == output

def kasumi_testset_3():
    kas     = KASUMI()
    key     = b'@5\xc6h\n\xf8\xc6\xd1\xa8\xff\x86g\xb1q@\x13'
    input   = b'b\xa5@\x98\x1b\xa6\xf9\xb7'
    output  = b'E\x92\xb0\xe7\x86\x90\xf7\x1b'
    kas._initialize(key)
    return kas._cipher_block(input) == output

def kasumi_testset_4():
    kas     = KASUMI()
    key     = b':;9\xb5\xc3\xf27mi\xf7\xd5F\xe5\xf8]C'
    input   = b'\xcaI\xc1\xc7Wq\xab\x0b'
    output  = b's\x8b\xadLJi\x08\x02'
    kas._initialize(key)
    for i in range(50):
        input = kas._cipher_block(input)
    return input == output

def kasumi_F8_testset_1():
    kas     = KASUMI()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 1923412495
    bearer  = 12
    direct  = 1
    data    = b'~\xc6\x12rt;\xf1aG&Djl8\xce\xd1f\xf6\xcav\xebT0\x04B\x864l\xef\x13\x0f\x92\x92+\x03E\r:\x99u\xe5\xbd.\xa0\xebU\xad\x8e\x1b\x19\x9e>\xc41` \xe9\xa1\xb2\x85\xe7bySY\xb7\xbd\xfd9\xbe\xf4\xb2HE\x83\xd5\xaf\xe0\x82\xae\xe68\xbf_\xd5\xa6\x06\x199\x01\xa0\x8fJ\xb4\x1a\xab\x9b\x13H\x80'
    bitlen  = 798
    output  = b'\xd1\xe2\xdep\xee\xf8lid\xfbT+\xc2\xd4`\xaa\xbf\xaa\x10\xa4\xa0\x93&+}\x19\x9epo\xc2\xd4\x89\x15S)i\x10\xf3\xa9s\x01&\x82\xe4\x1cN+\x02\xbe \x17\xb7%;\xbf\x93\t\xdeX\x19\xcbB\xe8\x19V\xf4\xc9\x9b\xc9v\\\xafS\xb1\xd0\xbb\x82y\x82j\xdb\xbcU"\xe9\x15\xc1 \xa6\x18\xa5\xa7\xf5\xe8\x97\x08\x939e\x0c' # was \x0f' in the spec, because last bits are not zeroed
    return kas.F8(key, count, bearer, direct, data, bitlen) == output

def kasumi_F8_testset_2():
    kas     = KASUMI()
    key     = b'\xef\xa8\xb2"\x9er\x0c*|6\xeaU\xe9`V\x95'
    count   = 3800813435
    bearer  = 24
    direct  = 0
    data    = b"\x10\x11\x121\xe0`%:C\xfd?W\xe3v\x07\xab('\xb5\x99\xb6\xb1\xbb\xda7\xa8\xab\xccZ\x8cU\r\x1b\xfb/IF$\xfbP6\x7f\xa3l\xe3\xbch\xf1\x1c\xf9;\x15\x107k\x02\x13\x0f\x81*\x9f\xa1i\xd8"
    bitlen  = 510
    output  = b'=\xea\xcc|\x15\x82\x1c\xaa\x89\xee\xca\xde\x9b[\xd3aK\xd0\xc8A\x9dq\x03\x85\xdd\xbeXI\xef\x1b\xacZ\xe8\xb1J[\ngAR\x1e\xb4\xe0\x0b\xb9\xec\xf3\xe9\xf7\xcc\xb9\xca\xe7AR\xd7\xf4\xe2\xa04\xb6\xea\x00\xec'
    return kas.F8(key, count, bearer, direct, data, bitlen) == output

def kasumi_F8_testset_3():
    kas     = KASUMI()
    key     = b'Z\xcb\x1ddL\rQ N\xa5\xf1E\x10\x10\xd8R'
    count   = 4199901990
    bearer  = 3
    direct  = 1
    data    = b'\xad\x9cD\x1f\x89\x0b8\xc4W\xa4\x9dB\x14\x07\xe8'
    bitlen  = 120
    output  = b'\x9b\xc9,\xa8\x03\xc6{(\xa1\x1aK\xeeZ\x0c%'
    return kas.F8(key, count, bearer, direct, data, bitlen) == output

def kasumi_F8_testset_4():
    kas     = KASUMI()
    key     = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c@5\xc6h\n\xf8\xc6\xd1'
    count   = 965368244
    bearer  = 5
    direct  = 1
    data    = b'\x98\x1b\xa6\x82L\x1b\xfb\x1a\xb4\x85G )\xb7\x1d\x80\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdcf\xb1\xf0'
    bitlen  = 253
    output  = b'[\xb9C\x1b\xb1\xe9\x8b\xd1\x1b\x93\xdb|=E\x13eY\xbb\x86\xa2\x95\xaa N\xcb\xeb\xf6\xf7\xa5\x10\x15\x10' # was \x12'
    return kas.F8(key, count, bearer, direct, data, bitlen) == output

def kasumi_F8_testset_5():
    kas     = KASUMI()
    key     = b'`\x90\xea\xe0L\x83pn\xec\xbfe+\xe8\xe3ef'
    count   = 1923412495
    bearer  = 9
    direct  = 0
    data    = b'@\x98\x1b\xa6\x82L\x1b\xfbB\x86\xb2\x99x=\xafD,\t\x9fz\xb0\xf5\x8d\\\x8eF\xb1\x04\xf0\x8f\x01\xb4\x1a\xb4\x85G )\xb7\x1d6\xbd\x1a=\x90\xdc:A\xb4mQg*\xc4\xc9f:+\xe0c\xdaK\xc8\xd2\x80\x8c\xe3>,\xcc\xbf\xc64\xe1\xb2Y\x06\x08v\xa0\xfb\xb5\xa47\xeb\xcc\x8d1\xc1\x9eDT1\x87E\xe3\x98vE\x98z\x98o,\xb0'
    bitlen  = 837
    output  = b'\xdd\xb3d\xdd*\xae\xc2M\xff)\x19W\xb7\x8b\xad\x06:\xc5y\xcd\x90A\xba\xbe\x89\xfd\x19\\\x05x\xcb\x9f\xdeB\x17Vax\xd2\x02@ m\x07\xcf\xa6\x19\xec\x05\x9fcQDY\xfc\x10\xd4-\xc9\x93NV\xeb\xc0\xcb\xc6\rM-\xf1twL\xbd\xcd]\xa4\xa3P1z\x7f\x12\xe1\x94\x94q\xf8\xa2\x95\xf2r\xe6\x8f\xc0qY\xb0}\x8e-&\xe4Y\x98' # was \x9e' in the spec, because last bits are not zeroed
    return kas.F8(key, count, bearer, direct, data, bitlen) == output

def kasumi_F9_testset_1():
    kas     = KASUMI()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 950464598
    fresh   = 97709129
    direct  = 0
    data    = b'k"w7)o9<\x80y5>\xdc\x87\xe2\xe8\x05\xd2\xecI\xa4\xf2\xd8\xe0'
    bitlen  = 189
    mac     = b'\xf6;\xd7,'
    return kas.F9(key, count, fresh, direct, data, bitlen) == mac

def kasumi_F9_testset_2():
    kas     = KASUMI()
    key     = b'\xd4/h$( \x1c\xaf\xcd\x9f\x97\x94^m\xe7\xb7'
    count   = 1054640098
    fresh   = 2767378658
    direct  = 1
    data    = b'\xb5\x92C\x842\x8aJ\xe0\x0bsq\t\xf8\xb6\xc8\xdd+M\xb6=\xd53\x98\x1c\xeb\x19\xaa\xd5*[+\xc0'
    bitlen  = 254
    mac     = b'\xa9\xda\xf1\xff'
    return kas.F9(key, count, fresh, direct, data, bitlen) == mac
    
def kasumi_F9_testset_3():
    kas     = KASUMI()
    key     = b'\xfd\xb9\xcf\xdf(\x93l\xc4\x83\xa3\x18i\xd8\x1b\x8f\xab'
    count   = 917463364
    fresh   = 2553868346
    direct  = 1
    data    = b'Y2\xbc\n\xce+\n\xba3\xd8\xac\x18\x8a\xc5O4o\xad\x10\xbf\x9d\xee) \xb4;\xd0\xc5:\x91\\\xb7\xdfl\xaar\x05:\xbf\xf2'
    bitlen  = 319
    mac     = b'\x157\xd3\x16'
    return kas.F9(key, count, fresh, direct, data, bitlen) == mac
    
def kasumi_F9_testset_4():
    kas     = KASUMI()
    key     = b'\xc76\xc6\xaa\xb2+\xff\xf9\x1e&\x98\xd2\xe2*\xd5~'
    count   = 343490113
    fresh   = 60287229
    direct  = 1
    data    = b"\xd0\xa7\xd4c\xdf\x9f\xb2\xb2x\x83?\xa0.#Z\xa1r\xbd\x97\x0c\x14s\xe1)\x07\xfbd\x8be\x99\xaa\xa0\xb2J\x03\x86eB+ \xa4\x99'jPBp\t"
    bitlen  = 384
    mac     = b'\xdd}\xfa\xdd'
    return kas.F9(key, count, fresh, direct, data, bitlen) == mac
    
def kasumi_F9_testset_5():
    kas     = KASUMI()
    key     = b'\xf4\xeb\xeci\xe7>\xaf.\xb2\xcfj\xf4\xb3\x12\x0f\xfd'
    count   = 695155004
    fresh   = 1797420855
    direct  = 1
    data    = b'\x10\xbf\xff\x83\x9e\x0cqe\x8d\xbb-\x17\x07\xe1ErOA\xc1oH\xbf@<;\x18\xe3\x8f\xd5\xd1f;om\x90\x01\x93\xe3\xce\xa8\xbbO\x1bO[\xe8"\x03"2\xa7\x8d}u#\x8d^m\xae\xcd;C"\xcfY\xbc~\xa8J\xb1\x88\x11\xb5\xbf\xb7\xbcU?O\xe4Dx\xce(z\x14\x87\x99\x90\xd1\x8d\x12\xcay\xd2\xc8U\x14\x90!\xcd\\\xe8\xca\x03q\xca\x04\xfc\xce\x14>=|\xfe\xe9E\x85\xb5\x88\\\xacF\x06\x8b'
    bitlen  = 1000
    mac     = b'\xc3\x83\x83\x9d'
    return kas.F9(key, count, fresh, direct, data, bitlen) == mac
    
def kasumi_testsets():
    return kasumi_testset_1() & kasumi_testset_2() & \
            kasumi_testset_3() & kasumi_testset_4() & \
            kasumi_F8_testset_1() & kasumi_F8_testset_2() & \
            kasumi_F8_testset_3() & kasumi_F8_testset_4() & \
            kasumi_F8_testset_5() & \
            kasumi_F9_testset_1() & kasumi_F9_testset_2() & \
            kasumi_F9_testset_3() & kasumi_F9_testset_4() & \
            kasumi_F9_testset_5()


###
# SNOW3G, F8, F9, EIA1: testsets from 3GPP TS 35.2XY Rel.10
###
    
def snow3g_testset_1():
    snow    = SNOW3G()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    iv      = b'\xea\x02G\x14\xad\\M\x84\xdf\x1f\x9b%\x1c\x0b\xf4_'
    output  = b'\xab\xee\x97\x04z\xc3\x13s'
    snow._initialize(key, iv)
    return snow._generate_keystream(8) == output

def snow3g_testset_2():
    snow    = SNOW3G()
    key     = b'\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdcf\xb1\xf3'
    iv      = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c\xdeU\x19\x88\xce\xb2\xf9\xb7'
    output  = b'\xef\xf8\xa3B\xf7QH\x0f'
    snow._initialize(key, iv)
    return snow._generate_keystream(8) == output
    
def snow3g_testset_3():
    snow    = SNOW3G()
    key     = b'@5\xc6h\n\xf8\xc6\xd1\xa8\xff\x86g\xb1q@\x13'
    iv      = b'b\xa5@\x98\x1b\xa6\xf9\xb7E\x92\xb0\xe7\x86\x90\xf7\x1b'
    output  = b'\xa8\xc8t\xa9z\xe7\xc4\xf8'
    snow._initialize(key, iv)
    return snow._generate_keystream(8) == output

def snow3g_testset_4():
    snow    = SNOW3G()
    key     = b'\r\xedrc\x10\x9c\xf9.3R%Z\x14\x0e\x0fv'
    iv      = b'kh\x07\x9aA\xa7\xc4\xc9\x1b\xef\xd7\x9f\x7f\xdc\xc23'
    output  = (b'\xd7\x12\xc0\\\xa97\xc2\xa6\xeb~\xaa\xe3', b'\x9c\r\xb3\xaa')
    snow._initialize(key, iv)
    ks = snow._generate_keystream(10000)
    return ks[0:12] == output[0] and ks[9996:10000] == output[1]
        
def snow3g_F8_testset_1():
    snow    = SNOW3G()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 1923412495
    bearer  = 12
    direct  = 1
    data    = b'~\xc6\x12rt;\xf1aG&Djl8\xce\xd1f\xf6\xcav\xebT0\x04B\x864l\xef\x13\x0f\x92\x92+\x03E\r:\x99u\xe5\xbd.\xa0\xebU\xad\x8e\x1b\x19\x9e>\xc41` \xe9\xa1\xb2\x85\xe7bySY\xb7\xbd\xfd9\xbe\xf4\xb2HE\x83\xd5\xaf\xe0\x82\xae\xe68\xbf_\xd5\xa6\x06\x199\x01\xa0\x8fJ\xb4\x1a\xab\x9b\x13H\x80'
    bitlen  = 798
    output  = b'\x8c\xeb\xa6)C\xdc\xed:\t\x90\xb0n\xa1\xb0\xa2\xc4\xfb<\xed\xc7\x1b6\x9fB\xbad\xc1\xebfe\xe7*\xa1\xc9\xbb\r\xea\xa2\x0f\xe8`X\xb8\xba\xee,.\x7f\x0b\xec\xceH\xb5)2\xa5<\x9d_\x93\x1a:|S"Y\xafC%\xe2\xa6^0\x84\xad_jQ;{\xdd\xc1\xb6_\n\xa0\xd9z\x05=\xb5Z\x88\xc4\xc4\xf9`^A@'
    return snow.F8(key, count, bearer, direct, data, bitlen) == output

def snow3g_F8_testset_2():
    snow    = SNOW3G()
    key     = b'\xef\xa8\xb2"\x9er\x0c*|6\xeaU\xe9`V\x95'
    count   = 3800813435
    bearer  = 24
    direct  = 0
    data    = b"\x10\x11\x121\xe0`%:C\xfd?W\xe3v\x07\xab('\xb5\x99\xb6\xb1\xbb\xda7\xa8\xab\xccZ\x8cU\r\x1b\xfb/IF$\xfbP6\x7f\xa3l\xe3\xbch\xf1\x1c\xf9;\x15\x107k\x02\x13\x0f\x81*\x9f\xa1i\xd8"
    bitlen  = 510
    output  = b'\xe0\xda\x15\xca\x8e%T\xf5\xe5l\x94h\xdcl|\x12\x9cV\x8a\xa5\x03#\x17\xe0N\x07)dl\xab\xef\xa6\x89\x86LA\x0f$\xf9\x19\xe6\x1e=\xfd\xfa\xd7~V\r\xb0\xa9\xcd6\xc3J\xe4\x18\x14\x90\xb2\x9f_\xa2\xfc'
    return snow.F8(key, count, bearer, direct, data, bitlen) == output

def snow3g_F8_testset_3():
    snow    = SNOW3G()
    key     = b'Z\xcb\x1ddL\rQ N\xa5\xf1E\x10\x10\xd8R'
    count   = 4199901990
    bearer  = 3
    direct  = 1
    data    = b'\xad\x9cD\x1f\x89\x0b8\xc4W\xa4\x9dB\x14\x07\xe8'
    bitlen  = 120
    output  = b'\xba\x0f10\x034\xc5kR\xa7I|\xba\xc0F'
    return snow.F8(key, count, bearer, direct, data, bitlen) == output

def snow3g_F8_testset_4():
    snow    = SNOW3G()
    key     = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c@5\xc6h\n\xf8\xc6\xd1'
    count   = 965368244
    bearer  = 5
    direct  = 1
    data    = b'\x98\x1b\xa6\x82L\x1b\xfb\x1a\xb4\x85G )\xb7\x1d\x80\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdcf\xb1\xf0'
    bitlen  = 253
    output  = b"\x98\x9bq\x9c\xdc3\xce\xb7\xcf'jR\x82|\xef\x94\xa5l@\xc0\xab\x9d\x81\xf7\xa2\xa9\xba\xc6\x0e\x11\xc4\xb0"
    return snow.F8(key, count, bearer, direct, data, bitlen) == output

def snow3g_F8_testset_5():
    snow    = SNOW3G()
    key     = b'`\x90\xea\xe0L\x83pn\xec\xbfe+\xe8\xe3ef'
    count   = 1923412495
    bearer  = 9
    direct  = 0
    data    = b'@\x98\x1b\xa6\x82L\x1b\xfbB\x86\xb2\x99x=\xafD,\t\x9fz\xb0\xf5\x8d\\\x8eF\xb1\x04\xf0\x8f\x01\xb4\x1a\xb4\x85G )\xb7\x1d6\xbd\x1a=\x90\xdc:A\xb4mQg*\xc4\xc9f:+\xe0c\xdaK\xc8\xd2\x80\x8c\xe3>,\xcc\xbf\xc64\xe1\xb2Y\x06\x08v\xa0\xfb\xb5\xa47\xeb\xcc\x8d1\xc1\x9eDT1\x87E\xe3\x98vE\x98z\x98o,\xb0'
    bitlen  = 837
    output  = b'X\x92\xbb\xa8\x8b\xbb\xca\xae\xaev\x9a\xa0kh=:\x17\xcc\x04\xa3i\x88\x16\x97C^D\xfe\xd5\xff\x9a\xf5{\x9e\x89\rM\\dp\x98\x85\xd4\x8a\xe4\x06\x90\xec\x04;\xaa\xe9pW\x96\xe4\xa9\xffZK\x8d\x8b6\xd7\xf3\xfeW\xccl\xfdl\xd0\x05\xcd8R\xa8^\x94\xcek\xcd\x90\xd0\xd0x9\xce\ts5D\xca\x8e5\x08C$\x85P\x92*\xc1(\x18'
    return snow.F8(key, count, bearer, direct, data, bitlen) == output

def snow3g_F9_testset_1():
    snow    = SNOW3G()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 950464598
    fresh   = 97709129
    direct  = 0
    data    = b'k"w7)o9<\x80y5>\xdc\x87\xe2\xe8\x05\xd2\xecI\xa4\xf2\xd8\xe0'
    bitlen  = 189
    output  = b'+\xce\x18 '
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_F9_testset_2():
    snow    = SNOW3G()
    key     = b'\xd4/h$( \x1c\xaf\xcd\x9f\x97\x94^m\xe7\xb7'
    count   = 1054640098
    fresh   = 2767378658
    direct  = 1
    data    = b'\xb5\x92C\x842\x8aJ\xe0\x0bsq\t\xf8\xb6\xc8\xdd+M\xb6=\xd53\x98\x1c\xeb\x19\xaa\xd5*[+\xc0'
    bitlen  = 254
    output  = b'\xfc{\x18\xbd'
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_F9_testset_3():
    snow    = SNOW3G()
    key     = b'\xfd\xb9\xcf\xdf(\x93l\xc4\x83\xa3\x18i\xd8\x1b\x8f\xab'
    count   = 917463364
    fresh   = 2553868346
    direct  = 1
    data    = b'Y2\xbc\n\xce+\n\xba3\xd8\xac\x18\x8a\xc5O4o\xad\x10\xbf\x9d\xee) \xb4;\xd0\xc5:\x91\\\xb7\xdfl\xaar\x05:\xbf\xf2'
    bitlen  = 319
    output  = b'\x02\xf1\xfa\xaf'
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_F9_testset_4():
    snow    = SNOW3G()
    key     = b'\xc76\xc6\xaa\xb2+\xff\xf9\x1e&\x98\xd2\xe2*\xd5~'
    count   = 343490113
    fresh   = 60287229
    direct  = 1
    data    = b"\xd0\xa7\xd4c\xdf\x9f\xb2\xb2x\x83?\xa0.#Z\xa1r\xbd\x97\x0c\x14s\xe1)\x07\xfbd\x8be\x99\xaa\xa0\xb2J\x03\x86eB+ \xa4\x99'jPBp\t"
    bitlen  = 384
    output  = b'8\xb5T\xc0'
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_F9_testset_5():
    snow    = SNOW3G()
    key     = b'\xf4\xeb\xeci\xe7>\xaf.\xb2\xcfj\xf4\xb3\x12\x0f\xfd'
    count   = 695155004
    fresh   = 1797420855
    direct  = 1
    data    = b'\x10\xbf\xff\x83\x9e\x0cqe\x8d\xbb-\x17\x07\xe1ErOA\xc1oH\xbf@<;\x18\xe3\x8f\xd5\xd1f;om\x90\x01\x93\xe3\xce\xa8\xbbO\x1bO[\xe8"\x03"2\xa7\x8d}u#\x8d^m\xae\xcd;C"\xcfY\xbc~\xa8J\xb1\x88\x11\xb5\xbf\xb7\xbcU?O\xe4Dx\xce(z\x14\x87\x99\x90\xd1\x8d\x12\xcay\xd2\xc8U\x14\x90!\xcd\\\xe8\xca\x03q\xca\x04\xfc\xce\x14>=|\xfe\xe9E\x85\xb5\x88\\\xacF\x06\x8b'
    bitlen  = 1000
    output  = b'\x06\x17E\xae'
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_F9_testset_6():
    snow    = SNOW3G()
    key     = b'\xb3\x12\x0f\xfd\xb2\xcfj\xf4\xe7>\xaf.\xf4\xeb\xeci'
    count   = 695155004
    fresh   = 1797420855
    direct  = 1
    data    = b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\xe0\x95\x80E\xf3\xa0\xbb\xa4\xe3\x96\x83F\xf0\xa3\xb8\xa7\xc0*\x01\x8a\xe6@vR&\xb9\x87\xc9\x13\xe6\xcb\xf0\x83W\x00\x16\xcf\x83\xef\xbca\xc0\x82Q>!V\x1aB|\x00\x9d(\xc2\x98\xef\xac\xe7\x8e\xd6\xd5l-E\x05\xad\x03.\x9c\x04\xdc`\xe7:\x81im\xa6e\xc6\xc4\x86\x03\xa5{E\xab3"\x15\x85\xe6\x8e\xe3\x16\x91\x87\xfb\x029R\x862\xddel\x80~\xa3$\x8b{F\xd0\x02\xb2\xb5\xc7E\x8e\xb8[\x9c\xe9Xy\xe04\x08Y\x05^;\n\xbb\xc3\xea\xce\x87\x19\xca\xa8\x02e\xc9r\x05\xd5\xdcK\xcc\x90/\xe1\x83\x96)\xedq2\x8a\x0f\x04I\xf5\x88U~h\x98\x86\x0e\x04*\xec\xd8K$\x04\xc2\x12\xc9"-\xa5\xbf\x8a\x89\xefg\x97\x87\x0c\xf5\x07q\xa6\x0ff\xa2\xeeb\x856W\xad\xdf\x04\xcd\xde\x07\xfaAN\x11\xf1+M\x81\xb9\xb4\xe8\xacS\x8e\xa3\x06fh\x8d\x88\x1fl4\x84!\x99/1\xb9O\x88\x06\xed\x8f\xcc\xffL\x91#\xb8\x96BRz\xd6\x13\xb1\t\xbfu\x16t\x85\xf1&\x8b\xf8\x84\xb4\xcd#\xd2\x9a\t4\x92W\x03\xd64\t\x8fwg\xf1\xbet\x91\xe7\x08\xa8\xbb\x94\x9a8sp\x8a\xefJ6#\x9eP\xcc\x08#\\\xd5\xedk\xbeW\x86h\xa1{X\xc1\x17\x1d\x0b\x90\xe8\x13\xa9\xe4\xf5\x8a\x89\xd7\x19\xb1\x10B\xd66\x0b\x1b\x0fR\xde\xb70\xa5\x8dX\xfa\xf4c\x15\x95K\n\x87&\x91GYw\xdc\x88\xc0\xd73\xfe\xffT`\n\x0c\xc1\xd00\n\xaa\xeb\x94W,n\x95\xb0\x1a\xe9\r\xe0O\x1d\xceG\xf8~\x8f\xa7\xbe\xbfw\xe1\xdb\xc2\rk\xa8\\\xb9\x14=Q\x8b(]\xfa\x04\xb6\x98\xbf\x0c\xf7\x81\x9f \xfaz(\x8e\xb0p=\x99\\Y\x94\x0c|f\xdeW\xa9\xb7\x0f\x827\x9bp\xe2\x03\x1eE\x0f\xcf\xd2\x18\x13&\xfc\xd2\x8d\x88#\xba\xaa\x80\xdfn\x0fD5Ydu9\xfd\x89\x07\xc0\xff\xd9\xd7\x9c\x13\x0e\xd8\x1c\x9a\xfd\x9b~\x84\x8c\x9f\xed8D=]8\x0eS\xfb\xdb\x8a\xc8\xc3\xd3\xf0hv\x05O\x12$a\x10}\xe9/\xea\t\xc6\xf6\x92:\x18\x8dS\xaf\xe5J\x10\xf6\x0en\x9dZ\x03\xd9\x96\xb5\xfb\xc8 \xf8\xa67\x11j\'\xad\x04\xb4D\xa0\x93-\xd6\x0f\xbd\x12g\x1c\x11\xe1\xc0\xecs\xe7\x89\x87\x9f\xaa=B\xc6M \xcd\x12Rt*7h\xc2Z\x90\x15\x85\x88\x8e\xce\xe1\xe6\x12\xd9\x93k@;\x07u\x94\x9af\xcd\xfd\x99\xa2\x9b\x13E\xba\xa8\xd9\xd5@\x0c\x91\x02K\n`sc\xb0\x13\xce]\xe9\xae\x86\x9d;\x8d\x95\xb0W\x0b<-9\x14"\xd3$P\xcb\xcf\xae\x96e"\x86\xe9m\xec\x12\x14\xa94e\'\x98\n\x81\x92\xea\xc1\xc3\x9a:\xafo\x155\x1d\xa6\xbevM\xf8\x97r\xec\x04\x07\xd0nD\x15\xbe\xfa\xe7\xc9%\x80\xdf\x9b\xf5\x07I|\x8f)\x95\x16\rN!\x8d\xaa\xcb\x02\x94J\xbf\x834\x0c\xe8\xbe\x16\x86\xa9`\xfa\xf9\x0e-\x90\xc5\\\xc6G[\xab\xc3\x17\x1a\x80\xa3c\x17IT\x95]q\x01\xda\xb1j\xe8\x17\x91g\xe2\x14D\xb4C\xa9\xea\xaa|\x91\xde6\xd1\x18\xc3\x9d8\x9f\x8d\xd4F\x9a\x84l\x9a&+\xf7\xfa\x18Hzy\xe8\xde\x11i\x9e\x0b\x8f\xdfU|\xb4\x87\x19\xd4S\xbaq0V\x10\x9b\x93\xa2\x18\xc8\x96u\xac\x19_\xb4\xfb\x06c\x9b7\x97\x14IU\xb3\xc92}\x1a\xec\x00=B\xec\xd0\xea\x98\xab\xf1\x9f\xfbJ\xf3V\x1ag\xe7|5\xbf\x15\xc5\x9c$\x12\xda\x88\x1d\xb0+\x1b\xfb\xce\xbf\xacQR\xbc\x99\xbc?\x1d\x15\xf7q\x00\x1bp)\xfe\xdb\x02\x8f\x8b\x85+\xc4@~\xb8?\x89\x1c\x9c\xa73%O\xdd\x1e\x9e\xdbV\x91\x9c\xe9\xfe\xa2\x1c\x17@rR\x1c\x181\x9aT\xb5\xd4\xef\xbe\xbd\xdf\x1d\x8bi\xb1\xcb\xf2_H\x9f\xcc\x98\x13rT|\xf4\x1d\x00\x8e\xf0\xbc\xa1\x92o\x93Ks^\t\x0b;%\x1e\xb3:6\xf8.\xd9\xb2\x9c\xf4\xcb\x94A\x88\xfa\x0e\x1e8\xddw\x8f}\x1c\x9d\x98{(\xd12\xdf\xb9s\x1f\xa4\xf4\xb4\x16\x93[\xe4\x9d\xe3\x05\x16\xaf5xX\x1f/\x13\xf5a\xc0f3a\x94\x1e\xab$\x9aK\xc1#\xf8\xd1\\\xd7\x11\xa9V\xa1\xbf \xfen\xb7\x8a\xea#s6\x1d\xa0Bly\xa50\xc3\xbb\x1d\xe0\xc9\x97"\xef\x1f\xde9\xac+\x00\xa0\xa8\xee|\x80\n\x08\xbc"d\xf8\x9fN\xff\xe6\'\xac/\x051\xfbUOm!\xd7LY\np\xad\xfa\xa3\x90\xbd\xfb\xb3\xd6\x8eF!\\\xab\x18}#h\xd5\xa7\x1f^\xbe\xc0\x81\xcd; \xc0\x82\xdb\xe4\xcd/\xac\xa2\x87sy]k\x0c\x10 Ke\x9a\x93\x9e\xf2\x9b\xbe\x10\x88$6$B\x99\'\xa7\xebWm\xd3\xa0\x0e\xa5\xe0\x1a\xf5\xd4u\x83\xb2\',\x0c\x16\x1a\x80e!\xa1o\xf9\xb0\xa7"\xc0\xcf&\xb0%\xd5\x83n"X\xa4\xf7\xd4w:\xc8\x01\xe4&;\xc2\x94\xf4=\xef\x7f\xa8p?:A\x97F5%\x88vR\xb0\xb2\xa4\xa2\xa7\xcf\x87\xf0\t\x14\x87\x1e%\x03\x91\x13\xc7\xe1a\x8d\xa3@d\xb5zC\xc4c$\x9f\xb8\xd0^\x0f&\xf4\xa6\xd8Ir\xe7\xa9\x05H$\x14_\x91)\\\xdb\xe3\x9ao\x92\x0f\xac\xc6Yq+F\xa5K\xa2\x95\xbb\xe6\xa9\x01T\xe9\x1b3\x98Z+\xcdB\n\xd5\xc6~\xc9\xad\x8e\xb7\xachd\xdb\'*Qk\xc9L(9\xb0\xa8\x16\x9ak\xf5\x8e\x1a\x0c*\xda\x8c\x88;{\xf4\x97\xa4\x91q&\x8e\xd1]\xdd)i8N\x7f\xf4\xbfJ\xab.\xc9\xec\xc6R\x9c\xf6)\xe2\xdf\x0f\x08\xa7ze\xaf\xa1*\xa9\xb5\x05\xdf\x8b(~\xf6\xcc\x91I=\x1c\xaa9\x07n(\xef\x1e\xa0(\xf5\x11\x8d\xe6\x1a\xe0+\xb6\xae\xfc3C\xa0P)/\x19\x9f@\x18W\xb2\xbe\xad^n\xe2\xa1\xf1\x91\x02/\x92x\x01o\x04w\x91\xa9\xd1\x8d\xa7\xd2\xa6\xd2\x7f.\x0eQ\xc2\xf6\xea0\xe8\xacI\xa0`OL\x13T.\x85\xb6\x83\x81\xb9\xfd\xcf\xa0\xceK-4\x13T\x85-6\x02E\xc56\xb6\x12\xafq\xf3\xe7|\x90\x95\xae-\xbd\xe5\x04\xb2es=\xab\xfe\x10\xa2\x0f\xc7\xd6\xd3,!\xcc\xc7+\x8b4D\xaef=e\x92-\x17\xf8,\xaa+\x86\\\xd8\x89\x13\xd2\x91\xa6X\x99\x02n\xa12\x849r<\x19\x8c6\xb0\xc3\xc8\xd0\x85\xbf\xaf\x8a2\x0f\xde3KJI\x19\xb4L+\x95\xf6\xe8\xec\xf73\x93\xf7\xf0\xd2\xa4\x0e`\xb1\xd4\x06Rk\x02-\xdc3\x18\x10\xb1\xa5\xf7\xc3G\xbdS\xed\x1f\x10]j\r0\xab\xa4w\xe1x\x88\x9a\xb2\xecU\xd5X\xde\xab&0 C6\x96+M\xb5\xb6c\xb6\x90+\x89\xe8[1\xbcj\xf5\x0f\xc5\n\xcc\xb3\xfb\x9bW\xb6c)p17\x8d\xb4x\x96\xd7\xfb\xafl`\n\xdd,g\xf96\xdb\x03y\x86\xdb\x85n\xb4\x9c\xf2\xdb?}\xa6\xd26P\xe48\xf1\x88@A\xb0\x13\x11\x9eL*\xe5\xaf7\xcc\xcd\xfbhf\x078\xb5\x8b<Y\xd1\xc0$\x847G*\xba\x1f5\xca\x1f\xb9\x0c\xd7\x14\xaa\x9fcU4\xf4\x9e|[\xba\x81\xc2\xb6\xb3o\xde\xe2\x1c\xa2~4\x7fy=,\xe9D\xed\xb2<\x8c\x9b\x91K\xe1\x035\xe3P\xfe\xb5\x07\x03\x94\xb7\xa4\xa1\\\x0c\xa1 (5h\xb7\xbf\xc2T\xfe\x83\x8b\x13z!G\xce|\x11::MeI\x9d\x9e\x86\xb8}\xbc\xc7\xf0;\xbd::\xb1\xaa$>\xce[\xa9\xbc\xf2_\x82\x83l\xfeG;-\x83\xe7\xa7 \x1c\xd0\xb9jrE\x1e\x86?l;\xa6d\xa6\xd0s\xd1\xf7\xb5\xed\x99\x08e\xd9x\xbd8\x15\xd0`\x94\xfc\x9a*\xbaR!\xc2-Z\xb9\x968\x9e7!\xe3\xaf_\x05\xbe\xdd\xc2\x87^\r\xfa\xeb9\x02\x1e\xe2zA\x18|\xbbE\xef@\xc3\xe7;\xc09\x89\xf9\xa3\r\x12\xc5K\xa7\xd2\x14\x1d\xa8\xa8uI>ewn\xf3_\x97\xde\xbc"\x86\xccJ\xf9\xb4b>\xee\x90/\x84\x0cR\xf1\xb8\xade\x899\xae\xf7\x1f?r\xb9\xec\x1d\xe2\x15\x88\xbd5HN\xa4D64?\xf9^\xadj\xb1\xd8\xaf\xb1\xb2\xa3\x03\xdf\x1bq\xe5<J\xeak.>\x93r\xbe\r\x1b\xc9\x97\x98\xb0\xce<\xc1\r*YmV]\xba\x82\xf8\x8c\xe4\xcf\xf3\xb3=]$\xe9\xc0\x83\x11$\xbf\x1a\xd5Ky%2\x98=\xd6\xc3\xa8\xb7\xd0'
    bitlen  = 16448
    output  = b'\x17\x9f/\xa6'
    return snow.F9(key, count, fresh, direct, data, bitlen) == output

def snow3g_EIA1_testset_1():
    snow    = SNOW3G()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 0x38a6f056
    bearer  = 31
    direct  = 0
    data    = b'324bc98a74y\x00\x00\x00\x00\x00'
    bitlen  = 88
    output  = b's\x1f\x11e'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_EIA1_testset_2():
    snow    = SNOW3G()
    key     = b'~^\x94C\x1e\x11\xd78(\xd79\xccl\xedEs'
    count   = 0x36af6144
    bearer  = 24
    direct  = 1
    data    = b'\xb3\xd3\xc9\x17\nN\x162\xf6\x0f\x86\x10\x13\xd2-\x84\xb7&\xb6\xa2x\xd8\x02\xd1\xee\xaf\x13!\xbaY)\xdc'
    bitlen  = 254
    output  = b'\xe3%\x9fo'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_EIA1_testset_3():
    snow    = SNOW3G()
    key     = b'\xd3A\x9b\xe8!\x08z\xcd\x02\x12:\x92H\x033Y'
    count   = 0xc7590ea9
    bearer  = 23
    direct  = 0
    data    = b'\xbb\xb0W\x03\x88\tIk\xcf\xf8mo\xbc\x8c\xe5\xb15\xa0k\x16`T\xf2\xd5e\xbe\x8a\xceu\xdc\x85\x1e\x0b\xcd\xd8\xf0qA\xc4\x95\x87/\xb5\xd8\xc0\xc6j\x8bm\xa5Vf>NF\x12\x05\xd8E\x80\xbe\xe5\xbc~'
    bitlen  = 511
    output  = b'\x9a\x16\xc7}'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_EIA1_testset_4():
    snow    = SNOW3G()
    key     = b'\x83\xfd#\xa2D\xa7L\xf3X\xda0\x19\xf1r&5'
    count   = 0x36af6144
    bearer  = 0xf
    direct  = 1
    data    = b'5\xc6\x87\x16c<f\xfbu\x0c&he\xd5<\x11\xea\x05\xb1\xe9\xfaI\xc89\x8dH\xe1\xef\xa5\x90\x9d9G\x90(7\xf5\xae\x96\xd5\xa0[\xc8\xd6\x1c\xa8\xdb\xef\x1b\x13\xa4\xb4\xab\xfeO\xb1\x00`E\xb6t\xbbTr\x93\x04\xc3\x82\xbeS\xa5\xaf\x05Uav\xf6\xea\xa2\xef\x1d\x05\xe4\xb0\x83\x18\x1e\xe6t\xcd\xa5\xa4\x85\xf7Mz'
    bitlen  = 768
    output  = b'\xbb\xa7D\x92'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_EIA1_testset_5():
    snow    = SNOW3G()
    key     = b'h2\xa6\\\xffDsb\x1e\xbd\xd4\xba&\xa9!\xfe'
    count   = 0x36af6144
    bearer  = 0x18
    direct  = 0
    data    = b'\xd3\xc589bh qwefv 287cb@\x98\x1b\xa6\x82L\x1b\xfb\x1a\xb4\x85G )\xb7\x1d\x80\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdc'
    bitlen  = 383
    output  = b'AE\xe4\xb0'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_EIA1_testset_6():
    snow    = SNOW3G()
    key     = b']\n\x80\xd8\x13J\xe1\x96w\x82Kg\x1e\x83\x8a\xf4'
    count   = 0x7827fab2 
    bearer  = 5
    direct  = 1
    data    = b"p\xde\xdf-\xc4,\\\xbd:\x96\xf8\xa0\xb1\x14\x18\xb3`\x8dW3`J,\xd3j\xab\xc7\x0c\xe3\x19;\xb5\x15;\xe2\xd3\xc0m\xfd\xb2\xd1n\x9c5qX\xbejA\xd6\xb8a\xe4\x91\xdb?\xbf\xebQ\x8e\xfc\xf0H\xd7\xd5\x89Ss\x0f\xf3\x0c\x9e\xc4p\xff\xcdf=\xc3B\x01\xc3j\xdd\xc0\x11\x1c5\xb3\x8a\xfe\xe7\xcf\xdbX.71\xf8\xb4\xba\xa8\xd1\xa8\x9c\x06\xe8\x11\x99\xa9qb'\xbe4N\xfc\xb46\xdd\xd0\xf0\x96\xc0d\xc3\xb5\xe2\xc3\x99\x99?\xc7s\x94\xf9\xe0\x97 \xa8\x11\x85\x0e\xf2;.\xe0]\x9eas`\x9d\x86\xe1\xc0\xc1\x8e\xa5\x1a\x01*\x00\xbbA;\x9c\xb8\x18\x8ap<\xd6\xba\xe3\x1c\xc6{4\xb1\xb0\x00\x19\xe6\xa2\xb2\xa6\x90\xf0&q\xfe|\x9e\xf8\xde\xc0\tNS7cG\x8dX\xd2\xc5\xf5\xb8'\xa0\x14\x8cYH\xa9i1\xac\xf8OFZd\xe6,\xe7@\x07\xe9\x91\xe3~\xa8#\xfa\x0f\xb2\x19#\xb7\x99\x05\xb73\xb61\xe6\xc7\xd6\x86\n81\xac5\x1a\x9cs\x0cR\xffr\xd9\xd3\x08\xee\xdb\xab!\xfd\xe1C\xa0\xea\x17\xe2>\xdc\x1ft\xcb\xb3c\x8a 3\xaa\xa1Td\xea\xa738]\xbb\xebo\xd75\t\xb8W\xe6\xa4\x19\xdc\xa1\xd8\x90z\xf9w\xfb\xacM\xfa5\xec"
    bitlen  = 2558
    output  = b'\x0f\xa2\xb1\xee'
    return snow.EIA1(key, count, bearer, direct, data, bitlen) == output

def snow3g_testsets():
    return snow3g_testset_1() & snow3g_testset_2() & \
            snow3g_testset_3() & snow3g_testset_4() & \
            snow3g_F8_testset_1() & snow3g_F8_testset_2() & \
            snow3g_F8_testset_3() & snow3g_F8_testset_4() & \
            snow3g_F8_testset_5() & \
            snow3g_F9_testset_1() & snow3g_F9_testset_2() & \
            snow3g_F9_testset_3() & snow3g_F9_testset_4() & \
            snow3g_F9_testset_5() & snow3g_F9_testset_6() & \
            snow3g_EIA1_testset_1() & snow3g_EIA1_testset_2() & \
            snow3g_EIA1_testset_3() & snow3g_EIA1_testset_4() & \
            snow3g_EIA1_testset_5() & snow3g_EIA1_testset_6()

###
# ZUC, EEA3, EIA3: testsets from GSMA
###

def zuc_testset_1():
    zuc     = ZUC()
    key     = 16 * b'\0'
    iv      = 16 * b'\0'
    output  = b"'\xbe\xdet\x01\x80\x82\xda"
    zuc._initialize(key, iv)
    return zuc._generate_keystream(8) == output

def zuc_testset_2():
    zuc     = ZUC()
    key     = 16 * b'\xff'
    iv      = 16 * b'\xff'
    output  = b'\x06W\xcf\xa0p\x969\x8b'
    zuc._initialize(key, iv)
    return zuc._generate_keystream(8) == output

def zuc_testset_3():
    zuc     = ZUC()
    key     = b'=LK\xe9j\x82\xfd\xae\xb5\x8fd\x1d\xb1{E['
    iv      = b'\x841\x9a\xa8\xdei\x15\xca\x1fk\xdak\xfb\xd8\xc7f'
    output  = b'\x14\xf1\xc2r2y\xc4\x19'
    zuc._initialize(key, iv)
    return zuc._generate_keystream(8) == output

def zuc_testset_4():
    zuc     = ZUC()
    key     = b'M2\x0b\xfa\xd4\xc2\x85\xbf\xd6\xb8\xbd\x00\xf3\x9d\x8bA'
    iv      = b'R\x95\x9d\xab\xa0\xbf\x17n\xce-\xc3\x15\x04\x9e\xb5t'
    output  = (b'\xedD\x00\xe7\x063\xe5\xc5', b'zWL\xdb')
    zuc._initialize(key, iv)
    ks = zuc._generate_keystream(8000)
    return ks[0:8] == output[0] and ks[7996:8000] == output[1]

def zuc_EEA3_testset_1():
    zuc     = ZUC()
    key     = b'\x17=\x14\xbaP\x03s\x1dz`\x04\x94p\xf0\n)'
    count   = 0x66035492
    bearer  = 0xf
    direct  = 0
    data    = b'l\xf6S@sUR\xab\x0c\x97R\xfao\x90%\xfe\x0b\xd6u\xd9\x00Xu\xb2\x00\x00\x00\x00'
    bitlen  = 193
    output  = b'\xa6\xc8_\xc6j\xfb\x853\xaa\xfc%\x18\xdf\xe7\x84\x94\x0e\xe1\xe4\xb00#\x8c\xc8\x00'
    return zuc.EEA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EEA3_testset_2():
    zuc     = ZUC()
    key     = b'\xe5\xbd>\xa0\xebU\xad\xe8f\xc6\xacX\xbdT0*'
    count   = 0x56823
    bearer  = 0x18
    direct  = 1
    data    = b'\x14\xa8\xefi=g\x85\x07\xbb\xe7\'\n\x7fg\xffP\x06\xc3R[\x98\x07\xe4g\xc4\xe5`\x00\xba3\x8f]B\x95Y\x03gQ\x82"F\xc8\r;8\xf0\x7fK\xe2\xd8\xffX\x05\xf5\x13")\xbd\xe9;\xbb\xdc\xaf8+\xf1\xee\x97/\xbf\x99w\xba\xda\x89E\x84z*l\x9a\xd3JfuT\xe0M\x1f\x7f\xa2\xc32A\xbd\x8f\x01\xba"\r'
    bitlen  = 800
    output  = b'\x13\x1dC\xe0\xde\xa1\xbe\\Z\x1b\xfd\x97\x1d\x85,\xbfq-{OW\x96\x1f\xea2\x08\xaf\xa8\xbc\xa43\xf4V\xad\t\xc7A~X\xbci\xcf\x88f\xd15?t\x86^\x80x\x1d -\xfb>\xcf\xf7\xfc\xbc;\x19\x0f\xe8* N\xd0\xe3P\xfc\x0fo&\x13\xb2\xf2\xbc\xa6\xdfZG:W\xa4\xa0\r\x98^\xba\xd8\x80\xd6\xf28d\xa0{\x01'
    return zuc.EEA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EEA3_testset_3():
    zuc     = ZUC()
    key     = b'\xd4U*\x8f\xd6\xe6\x1c\xc8\x1a \t\x14\x1a)\xc1\x0b'
    count   = 0x76452ec1
    bearer  = 2
    direct  = 1
    data    = b'8\xf0\x7fK\xe2\xd8\xffX\x05\xf5\x13")\xbd\xe9;\xbb\xdc\xaf8+\xf1\xee\x97/\xbf\x99w\xba\xda\x89E\x84z*l\x9a\xd3JfuT\xe0M\x1f\x7f\xa2\xc32A\xbd\x8f\x01\xba"\r<\xa4\xecA\xe0tY_T\xae+EO\xd9qC C`\x19e\xcc\xa8\\$\x17\xedl\xbe\xc3\xba\xda\x84\xfc\x8aW\x9a\xeax7\xb0\'\x11w$*d\xdc\n\x9d\xe7\x1a\x8e\xde\xe8l\xa3\xd4}\x03=k\xf59\x80N\xca\x86\xc5\x84\xa9\x05-\xe4j\xd3\xfc\xedeT;\xd9\x02\x077+\'\xaf\xb7\x924\xf5\xffC\xea\x87\x08 \xe2\xc2\xb7\x8a\x8a\xaea\xcc\xe5*\x05\x15\xe3H\xd1\x96fJ4V\xb1\x82\xa0|@nJ y\x12q\xcf\xed\xa1e\xd55\xec^\xa2\xd4\xdf@\x00\x00\x00'
    bitlen  = 1570
    output  = b'\x83\x83\xb0"\x9f\xcc\x0b\x9d"\x95\xecA\xc9w\xe9\xc2\xbbr\xe2 7\x81A\xf9\xc81\x8f:\'\r\xfb\xcd\xeed\x11\xc2\xb3\x04O\x17m\xc6\xe0\x0f\x89`\xf9z\xfa\xcd\x13\x1a\xd6\xa3\xb4\x9b\x16\xb7\xba\xbc\xf2\xa5\t\xeb\xb1ju\xdc\xab\x14\xff\']\xbe\xee\xa1\xa2\xb1U\xf9\xd5,&E-\x01\x87\xc3\x10\xa4\xeeU\xbe\xaax\xab@$a[\xa9\xf5\xd5\xad\xc7r\x8fsV\x06q\xf0\x13\xe5\xe5P\x08]2\x91\xdf}_\xec\xed\xde\xd5Yd\x1bl/XR3\xbcq\xe9`+\xd20XU\xbb\xd2_\xfa\x7f\x17\xec\xbc\x04-\xaa\xe3\x8c\x1fW\xad\x8e\x8e\xbd74oq\xbe\xfd\xbbt2\xe0\xe0\xbb,\xfc\t\xbc\xd9ep\xcb\x0c\x0c9\xdf^))N\x82p:c\x7f\x80'
    return zuc.EEA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EEA3_testset_4():
    zuc     = ZUC()
    key     = b'\xdb\x84\xb4\xfb\xcc\xdaV;f"{\xfeEo\x0fw'
    count   = 0xe4850fe1
    bearer  = 0x10
    direct  = 1
    data    = b'\xe59\xf3\xb8\x972@\xda\x03\xf2\xb8\xaa\x05\xee\n\x00\xdb\xaf\xc0\xe1\x82\x05]\xfe=s\x83\xd9,\xef@\xe9)(`]R\xd0_O\x90\x18\xa1\xf1\x89\xae9\x97\xce\x19\x15_\xb1"\x1d\xb8\xbb\tQ\xa8S\xad\x85,\xe1l\xff\x078,\x93\xa1W\xde\x00\xdd\xb1%\xc7S\x9f\xd8PE\xe4\xee\x07\xe0\xc4?\x9e\x9doAO\xc4\xd1\xc6)\x17\x81?t\xc0\x0f\xc8?>.\xd7\xc4[\xa5\x83Rd\xb4>\x0b \xaf\xdak0S\xbf\xb6B;\x7f\xce%G\x9f\xf5\xf19\xdd\x9b[\x99UX\xe2\xa5k\xe1\x8d\xd5\x81\xcd\x01|s^o\r\r\x97\xc4\xdd\xc1\xd1\xdap\xc6\xdbJ\x12\xcc\x92w\x8e/\xbb\xd6\xf3\xbaR\xaf\x91\xc9\xc6\xb6N\x8d\xa4\xf7\xa2\xc2f\xd0-\x00\x17S\xdf\x08\x96\x03\x93\xc5\xd5h\x88\xbfI\xeb\\\x16\xd9\xa8\x04\'\xa4\x16\xbc\xb5\x97\xdf[\xfeo\x13\x89\n\x07\xee\x13@\xe6Gk\r\x9a\xa8\xf8"\xab\x0f\xd1\xab\r O@\xb7\xceo.\x13n\xb6t\x85\xe5\x07\x80MPE\x88\xad7\xff\xd8\x16V\x8b-\xc4\x03\x11\xdf\xb6T\xcd\xea\xd4~#\x85\xc3Cb\x03\xdd\x83o\x9cd\xd9tb\xad]\xfac\xb5\xcf\xe0\x8a\xcb\x952\x86o\\\xa7\x87Vo\xca\x93\xe6\xb1i>\xe1\\\xf6\xf7\xa2\xd6\x89\xd9t\x17\x98\xdc\x1c#\x8e\x1b\xe6Ps;\x18\xfb4\xff\x88\x0e\x16\xbb\xd2\x1bG\xac\x00\x00'
    bitlen  = 2798
    output  = b'K\xbf\xa9\x1b\xa2]G\xdb\x9a\x9f\x19\r\x96*\x19\xab29&\xb3Q\xfb\xd3\x9e5\x1e\x05\xda\x8b\x89%\xe3\x0b\x1c\xce\r\x12!\x10\x10\x95\x81\\\xc7\xcbc\x19P\x9e\xc0\xd6y@I\x19\x87\xe1?\n\xff\xac3*\xa6\xaadbm>\x9a\x19\x17Q\x9e\x0b\x97\xb6U\xc6\xa1e\xe4L\xa9\xfe\xac\x07\x90\xd2\xa3!\xad=\x86\xb7\x9cQ8s\x9f\xa3\x8d\x88~\xc7\xde\xf4I\xce\x8a\xbd\xd3\xe7\xf8\xdcL\xa9\xe7\xb73\x14\xad1\x0f\x90%\xe6\x19F\xb3\xa5m\xc6I\xec\r\xa0\xd69C\xdf\xf5\x92\xcf\x96*~\xfb,\x85$\xe3Z*nxy\xd6&\x04\xef&\x86\x95\xfa@\x03\x02~"\xe6\x080wR d\xbdJ[\x90k_S\x12t\xf25\xedPl\xff\x01T\xc7T\x92\x8a\x0c\xe5Go,\xb1\x02\n\x12"\xd3,\x14U\xec\xae\xf1\xe3h\xfb4M\x175\xbf\xbe\xde\xb7\x1d\n3\xa2\xa5K\x1d\xa5\xa2\x94\xe6y\x14M\xdf\x11\xeb\x1a=\xe8\xcf\x0c\xc0a\x91yt\xf3\\\x1d\x9c\xa0\xac\x81\x80\x7f\x8f\xcc\xe6\x19\x9alw\x12\xda\x86P!\xb0L\xe0C\x95\x16\xf1\xa5&\xcc\xda\x9f\xd9\xab\xbdS\xc3\xa6\x84\xf9\xae\x1e~\xe6\xb1\x1d\xa18\xea\x82lU\x16\xb5\xaa\xdf\x1a\xbb\xe3o\xa7\xff\xf9.:\x11v\x06N\x8d\x95\xf2\xe4\x88+U\x00\xb92(\xb2\x19JG\\\x1a\'\xf6?\x9f\xfd&I\x89\xa1\xbc'
    return zuc.EEA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EEA3_testset_5():
    zuc     = ZUC()
    key     = b'\xe1?\xed!\xb4nN~\xc3\x12S\xb2\xbb\x17\xb3\xe0'
    count   = 0x2738cdaa
    bearer  = 0x1a
    direct  = 0
    data    = b"\x8dt\xe2\rT\x89N\x06\xd3\xcb\x13\xcb93\x06^\x86t\xbeb\xad\xb1\xc7+:die\xabc\xcb{xT\xdf\xdc'\xe8I)\xf4\x9cd\xb8r\xa4\x90\xb1?\x95{d\x82~q\xf4\x1f\xbdBi\xa4,\x97\xf8$Sp'\xf8n\x9fJ\xd8-\x1d\xf4Qi\x0f\xdd\x98\xb6\xd0?:\x0e\xbe:1-k\x84\x0b\xa5\xa1\x82\x0b*,\x97\t\xc0\x90\xd2E\xed&|\xf8E\xaeA\xfa\x97]33\xac0\t\xfd@\xeb\xa9\xeb[\x88W\x14\xb7h\xb6\x97\x13\x8b\xaf!8\x0e\xcaI\xf6D\xd4\x86\x89\xe4!W`\xb9\x06s\x9f\r+?\t\x113\xca\x15\xd9\x81\xcb\xe4\x01\xba\xf7-\x05\xac\xe0\\\xcc\xb2\xd2\x97\xf4\xefj_X\xd9\x12F\xcf\xa7r\x15\xb8\x92\xabD\x1dRxE'\x95\xcc\xb7\xf5\xd7\x90W\xa1\xc4\xf7\x7f\x80\xd4m\xb2\x03<\xb7\x9b\xed\xf8\xe6\x05Q\xce\x10\xc6g\xf6*\x97\xab\xaf\xab\xbc\xd6w \x18\xdf\x96\xa2\x82\xeas|\xe2\xcb3\x12\x11\xf6\rST\xcex\xf9\x91\x8d\x9c l\xa0B\xc9\xb6#\x87\xddp\x96\x04\xa5\n\xf1m\x8d5\xa8\x90k\xe4\x84\xcf.t\xa9(\x99@6CS$\x9b'\xb4\xc9\xae)\xed\xdf\xc7\xdad\x18y\x1aN{\xaa\x06`\xfadQ\x1f-h\\\xc3\xa5\xffp\xe0\xd2\xb7B\x92\xe3\xb8\xa0\xcdk\x04\xb1\xc7\x90\xb8\xea\xd2p7\x08T\r\xea/\xc0\x9c=\xa7p\xf6TI\xe8M\x81zOU\x10U\xe1\x9a\xb8P\x18\xa0\x02\x8bq\xa1D\xd9g\x91\xe9\xa3Wy3PN\xee\x00`4\x0ci\xd2t\xe1\xbf\x9d\x80]\xcb\xcc\x1ao\xaa\x97h\x00\xb6\xff+g\x1d\xc4ce/\xa8\xa3>\xe5\tt\xc1\xc2\x1b\xe0\x1e\xab\xb2\x16t0&\x9dr\xeeQ\x1c\x9d\xde0y|\x9a%\xd8l\xe7O[\x96\x1b\xe5\xfd\xfbh\x07\x81@9\xe7\x13v6\xbd\x1d\x7f\xa9\xe0\x9e\xfd \x07PY\x06\xa5\xacE\xdf\xde\xedwW\xbb\xeetWI\xc2\x9635\x0b\xee\x0e\xa6\xf4\t\xdfE\x80\x16\x00\x00"
    bitlen  = 4019
    output  = b'\x94\xea\xa4\xaa0\xa5q7\xdd\xf0\x9b\x97\xb2V\x18\xa2\n\x13\xe2\xf1\x0f\xa5\xbf\x81a\xa8y\xcc*\xe7\x97\xa6\xb4\xcf-\x9d\xf3\x1d\xeb\xb9\x90\\\xcf\xec\x97\xde`]!\xc6\x1a\xb8S\x1b\x7f<\x9d\xa5\xf091\xf8\xa0d-\xe4\x82\x11\xf5\xf5/\xfe\xa1\x0f9*\x04vi\x98]\xa4T\xa2\x8f\x08\ta\xa6\xc2\xb6-\xaa\x17\xf3<\xd6\nIq\xf4\x8d-\x90\x93\x94\xa5_H\x11z\xceC\xd7\x08\xe6\xb7}=\xc4m\x8b\xc0\x17\xd4\xd1\xab\xb7{t(\xc0B\xb0o/\x99\xd8\xd0|\x98y\xd9\x96\x00\x12z1\x98_\x10\x99\xbb\xd7\xd6\xc1Q\x9e\xde\x8f^\xebJa\x0b4\x9a\xc0\x1e\xa25\x06\x91uk\xd1\x05\xc9t\xa5>\xdd\xb3]\x1dA\x00\xb0\x12\xe5"\xabA\xf4\xc5\xf2\xfd\xe7kY\xcb\x8b\x96\xd8\x85\xcf\xe4\x08\r\x13(\xa0\xd66\xcc\x0e\xdc\x05\x80\x0bv\xac\xca\x8f\xefg \x84\xd1\xf5*\x8b\xbd\x8e\t\x932\t\x92\xc7\xff\xba\xe1|@\x84A\xe0\xee\x88?\xc8\xa8\xb0^"\xf5\xff\x7f\x8d\x1bH\xc7LF\x8cFz\x02\x8f\t\xfd|\xe9\x11\t\xa5p\xa2\xd5\xc4\xd5\xf4\xfa\x18\xc5\xdd>Eb\xaf\xe2N\xf7q\x90\x1fY\xafdX\x98\xac\xef\x08\x8a\xba\xe0~\x92\xd5.\xb2\xdeU\x04[\xb1\xb7\xc4\x16N\xf2\xd7\xa6\xca\xc1^\xeb\x92m~\xa2\xf0\x8bf\xe1\xf7Y\xf3\xae\xe4F\x14rZ\xa3\xc7H+0\x84L\x14?\xf8[S\xf1\xe5\x83\xc5\x01%}\xdd\xd0\x96\xb8\x12h\xda\xa3\x03\xf1r4\xc235A\xf0\xbb\x8e\x19\x06H\xc5\x80|\x86mq\x93"\x86\t\xad\xb9Hho}\xe2\x94\xa8\x02\xcc8\xf7\xfeR\x08\xf5\xea1\x96\xd0\x16{\x9b\xdd\x02\xf0\xd2\xa5"\x1c\xa5\x08\xf8\x93\xaf\\KK\xb9\xf4\xf5 \xfd\x84(\x9b=\xbe~aIz~*X@7\xeac{i\x81\x12qt\xafW\xb4q\xdfK\'h\xfdy\xc1T\x0f\xb3\xed\xf2\xea"\xcbi\xbe\xc0\xcf\x8d\x93=\x9co\xddd^\x85\x05\x91\xcc\xa3\xd6,\x0c\xc0'
    return zuc.EEA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EIA3_testset_1():
    zuc     = ZUC()
    key     = 16 * b'\0'
    count   = 0
    bearer  = 0
    direct  = 0
    data    = b'\0\0\0\0'
    bitlen  = 1
    output  = b'\xc8\xa9Y^'
    return zuc.EIA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EIA3_testset_2():
    zuc     = ZUC()
    key     = b'G\x05A%V\x1e\xb2\xdd\xa9@Y\xda\x05\txP'
    count   = 0x561eb2dd
    bearer  = 0x14
    direct  = 0
    data    = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    bitlen  = 90
    output  = b'g\x19\xa0\x88'
    return zuc.EIA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EIA3_testset_3():
    zuc     = ZUC()
    key     = b'\xc9\xe6\xce\xc4`|r\xdb\x00\n\xef\xa8\x83\x85\xab\n'
    count   = 0xa94059da
    bearer  = 0xa
    direct  = 1
    data    = b'\x98;A\xd4}x\x0c\x9e\x1a\xd1\x1d~\xb7\x03\x91\xb1\xde\x0b5\xda-\xc6/\x83\xe7\xb7\x8dc\x06\xca\x0e\xa0~\x94\x1b{\xe9\x13H\xf9\xfc\xb1p\xe2!\x7f\xec\xd9\x7f\x9fh\xad\xb1n]}!\xe5i\xd2\x80\xedw\\\xeb\xde?@\x93\xc58\x81\x00\x00\x00\x00'
    bitlen  = 577
    output  = b'\xfa\xe8\xff\x0b'
    return zuc.EIA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EIA3_testset_4():
    zuc     = ZUC()
    key     = b'\xc8\xa4\x82b\xd0\xc2\xe2\xba\xc4\xb9n\xf7~\x80\xcaY'
    count   = 0x5097850
    bearer  = 0x10
    direct  = 1
    data    = b'\xb5FC\x0b\xf8{O\x1e\xe84pL\xd6\x95\x1c6\xe2o\x10\x8c\xf71x\x8fH\xdc4\xf1g\x8c\x05"\x1c\x8f\xa7\xff/9\xf4w\xe7\xe4\x9e\xf6\nN\xc2\xc3\xde$1*\x96\xaa&\xe1\xcf\xbaWV88\xb2\x97\xf4~\x85\x10\xc7y\xfdfT\xb1C8o\xa69\xd3\x1e\xdb\xd6\xc0nG\xd1Y\xd9Cb\xf2j\xee\xed\xee\x0eOI\xd9\xbf\x84\x12\x99T\x15\xbf\xadV\xee\x82\xd1\xcatc\xab\xf0\x85\xb0\x82\xb0\x99\x04\xd6\xd9\x90\xd4<\xf2\xe0b\xf4\x089\xd92H\xb1\xeb\x92\xcd\xfe\xd50\x0b\xc1H(\x040\xb6\xd0\xca\xa0\x94\xb6\xec\x89\x11\xab}\xc3h$\xb8$\xdc\n\xf6h+\t5\xfd\xe7\xb4\x92\xa1M\xc2\xf46H\x03\x8d\xa2\xcfy\x17\r-P\x13?\xd4\x94\x16\xcbn3\xbe\xa9\x0b\x8b\xf4U\x9b\x03s*\x01\xea)\x0em\x07Oy\xbb\x83\xc1\x0eX\x00\x15\xcc\x1a\x85\xb3kU\x01\x04n\x9cK\xdc\xaeQ5i\x0b\x86f\xbdT\xb7\xa7\x03\xea{o"\nTi\xa5h\x02~'
    bitlen  = 2079
    output  = b'\x00J\xc4\xd6'
    return zuc.EIA3(key, count, bearer, direct, data, bitlen) == output

def zuc_EIA3_testset_5():
    zuc     = ZUC()
    key     = b'k\x8b\x08\xeey\xe0\xb5\x98-m\x12\x8e\xa9\xf2 \xcb'
    count   = 0x561eb2dd
    bearer  = 0x1c
    direct  = 0
    data    = b'[\xadrG\x10\xba\x1cV\xd5\xa3\x15\xf8\xd4\x0fn\t7\x80\xbe\x8e\x8d\xe0{i\x92C \x18\xe0\x8e\xd9jW4\xaf\x8b\xad\x8aW]:\x1f\x16/\x85\x04\\\xc7p\x92Uq\xd9\xf5\xb9NEJw\xc1nr\x93k\xf0\x16\xae\x15t\x99\xf0T;]R\xca\xa6\xdb\xea\xb6\x97\xd2\xbbs\xe4\x1b\x80u\xdc\xe7\x9bK\x86\x04Of\x1dD\x85\xa5C\xddx`n\x04\x19\xe8\x05\x98Y\xd3\xcb+g\xce\tw`?\x81\xff\x83\x9e3\x18YTL\xfb\xc8\xd0\x0f\xef\x1aL\x85\x10\xfbT}k\x06\xc6\x11\xefD\xf1\xbc\xe1\x07\xcf\xa4Z\x06\xaa\xb3`\x15+(\xdc\x1e\xbeo\x7f\xe0\x9b\x05\x16\xf9\xa5\xb0*\x1b\xd8K\xb0\x18\x1e.\x89\xe1\x9b\xd8\x12Y0\xd1xh/8b\xdcQ\xb66\xf0Nr\x0cG\xc3\xceQ\xadp\xd9K\x9b"U\xfb\xae\x90eI\xf4\x99\xf8\xc6\xd3\x99G\xed^]\xf8\xe2\xde\xf1\x13%>{\x08\xd0\xa7kk\xfch\xc8\x12\xf3u\xc7\x9b\x8f\xe5\xfd\x85\x97j\xa6\xd4kJ#9\xd8\xaeQG\xf6\x80\xfb\xe7\x0f\x97\x8b8\xef\xfd{/xf\xa2%T\xe1\x93\xa9N\x98\xa6\x8bt\xbd%\xbb+?_\xb0\xa5\xfdY\x88\x7f\x9a\xb6\x81Y\xb7\x17\x8d[{g|\xb5F\xbfA\xea\xdc\xa2\x16\xfc\x10\x85\x01(\xf8\xbd\xef\\\x8d\x89\xf9j\xfaO\xa8\xb5H\x85V^\xd88\xa9P\xfe\xe5\xf1\xc3\xb0\xa4\xf6\xfbq\xe5M\xfd\x16\x9e\x82\xce\xccrf\xc8P\xe6|^\xf0\xba\x96\x0fR\x14\x06\x0eq\xeb\x17*u\xfc\x14\x86\x83\\\xbe\xa6SDe\xb0U\xc9jr\xe4\x10R$\x18#%\xd80AK@!M\xaa\x80\x91\xd2\xe0\xfb\x01\n\xe1\\m\xe9\x08P\x97;\xdf\x1eB;\xe1H\xa27\xb8z\x0c\x9f4\xd4\xb4v\x05\xb8\x03\xd7C\xa8j\x909\x9aJ\xf3\x96\xd3\xa1 \nb\xf3\xd9Pyb\xe8\xe5\xbe\xe6\xd3\xda+\xb3\xf7#vd\xacz)(#\x90\x0b\xc65\x03\xb2\x9e\x80\xd6?`g\xbf\x8e\x17\x16\xac%\xbe\xba5\r\xebb\xa9\x9f\xe01\x85\xebOi\x93~\xcd8yA\xfd\xa5D\xbag\xdb\t\x11wI8\xb0\x18\'\xbc\xc6\x9c\x92\xb3\xf7r\xa9\xd2\x85\x9e\xf0\x039\x8b\x1fk\xba\xd7\xb5t\xf7\x98\x9a\x1d\x10\xb2\xdfy\x8e\r\xbf0\xd6Xtd\xd2Hx\xcd\x00\xc0\xea\xee\x8a\x1a\x0c\xc7S\xa2yy\xe1\x1bA\xdb\x1d\xe3\xd5\x03\x8a\xfa\xf4\x9f\\h,7H\xd8\xa3\xa9\xecT\xe6\xa3q\'_\x16\x83Q\x0f\x8eO\x90\x93\x8f\x9a\xb6\xe14\xc2\xcf\xdfHA\xcb\xa8\x8e\x0c\xff+\x0b\xcc\x8ej\xdc\xb7\x11\t\xb5\x19\x8f\xec\xf1\xbb~\\S\x1a\xcaP\xa5j\x8a;m\xe5\x98b\xd4\x1f\xa1\x13\xd9\xcd\x95x\x08\xf0\x85q\xd9\xa4\xbby*\xf2q\xf6\xccm\xbb\x8d\xc7\xec6\xe3k\xe1\xed0\x81d\xc3\x1c|\n\xfcT\x1c\x00\x00\x00'
    bitlen  = 5670
    output  = b"\x0c\xa1'\x92"
    return zuc.EIA3(key, count, bearer, direct, data, bitlen) == output

def zuc_testsets():
    return zuc_testset_1() & zuc_testset_2() & \
            zuc_testset_3() & zuc_testset_4() & \
            zuc_EEA3_testset_1() & zuc_EEA3_testset_2() & \
            zuc_EEA3_testset_3() & zuc_EEA3_testset_4() & \
            zuc_EEA3_testset_5() & \
            zuc_EIA3_testset_1() & zuc_EIA3_testset_2() & \
            zuc_EIA3_testset_3() & zuc_EIA3_testset_4() & \
            zuc_EIA3_testset_5()

###
# EEA2, EIA2: testsets from 3GPP TS 33.401
###

def aes_EEA2_testset_1():
    aes3gpp = AES_3GPP()
    key     = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c@5\xc6h\n\xf8\xc6\xd1'
    count   = 0x398a59b4 
    bearer  = 0x15
    direct  = 1
    data    = b'\x98\x1b\xa6\x82L\x1b\xfb\x1a\xb4\x85G )\xb7\x1d\x80\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdcf\xb1\xf0'
    bitlen  = 253
    output  = b'\xe9\xfe\xd8\xa6=\x15S\x04\xd7\x1d\xf2\x0b\xf3\xe8"\x14\xb2\x0e\xd7\xda\xd2\xf23\xdc<"\xd7\xbd\xee\xed\x8ex'
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EEA2_testset_2():
    aes3gpp = AES_3GPP()
    key     = b'+\xd6E\x9f\x82\xc4@\xe0\x95,I\x10H\x05\xffH'
    count   = 0xc675a64b 
    bearer  = 0xc
    direct  = 1
    data    = b'~\xc6\x12rt;\xf1aG&Djl8\xce\xd1f\xf6\xcav\xebT0\x04B\x864l\xef\x13\x0f\x92\x92+\x03E\r:\x99u\xe5\xbd.\xa0\xebU\xad\x8e\x1b\x19\x9e>\xc41` \xe9\xa1\xb2\x85\xe7bySY\xb7\xbd\xfd9\xbe\xf4\xb2HE\x83\xd5\xaf\xe0\x82\xae\xe68\xbf_\xd5\xa6\x06\x199\x01\xa0\x8fJ\xb4\x1a\xab\x9b\x13H\x80'
    bitlen  = 798
    output  = b'Ya`SS\xc6K\xdc\xa1[\x19^(\x85S\xa9\x10c%\x06\xd6 \n\xa7\x90\xc4\xc8\x06\xc9\x99\x04\xcf$E\xccP\xbb\x1c\xf1h\xa4\x96ssN\x08\x1bW\xe3$\xceRY\xc0\xe7\x8dL\xd9{\x87\tvP<\tC\xf2\xcbZ\xe8\xf0R\xc7\xb7\xd3\x92#\x95\x87\xb8\x95`\x86\xbc\xab\x18\x83`B\xe2\xe6\xceBC*\x17\x10\\S\xd0'
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EEA2_testset_3():
    aes3gpp = AES_3GPP()
    key     = b'\n\x8bk\xd8\xd9\xb0\x8b\x08\xd6N2\xd1\x81ww\xfb'
    count   = 0x544d49cd
    bearer  = 0x4
    direct  = 0
    data    = b'\xfd@\xa4\x1d7\n\x1fetP\x95h}G\xba\x1d6\xd24\x9e#\xf6D9,\x8e\xa9\xc4\x9d@\xc12q\xaf\xf2d\xd0\xf2H\x00'
    bitlen  = 310
    output  = b'uu\r7\xb4\xbb\xa2\xa4\xde\xdb4#[\xd6\x8cfE\xac\xda\xac\xa4\x818\xa3\xb0\xc4q\xe2\xa7\x04\x1aWd#\xd2\x92r\x87\xf0'
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EEA2_testset_4():
    aes3gpp = AES_3GPP()
    key     = b'\xaa\x1f\x95\xae\xa53\xbc\xb3.\xb6;\xf5-\x8f\x83\x1a'
    count   = 0x72d8c671
    bearer  = 0x10
    direct  = 1
    data    = b'\xfb\x1b\x96\xc5\xc8\xba\xdf\xb2\xe8\xe8\xed\xfd\xe7\x8eW\xf2\xad\x81\xe7A\x03\xfcC\nSM\xcc7\xaf\xce\xc7\x0e\x15\x17\xbb\x06\xf2r\x19\xda\xe4\x90"\xdd\xc4z\x06\x8d\xe4\xc9Ij\x95\x1ak\t\xed\xbd\xc8d\xc7\xad\xbdt\n\xc5\x0c\x02/0\x82\xba\xfd"\xd7\x81\x97\xc5\xd5\x08\xb9w\xbc\xa1?2\xe6R\xe7K\xa7(W`w\xceb\x8cS^\x87\xdc`w\xba\x07\xd2\x90hY\x0c\x8c\xb5\xf1\x08\x8e\x08,\xfa\x0e\xc9a0-i\xcf=D'
    bitlen  = 1022
    output  = b'\xdf\xb4@\xac\xb3w5I\xef\xc0F(\xae\xb8\xd8\x15bu#\x0b\xdci\r\x94\xb0\r\x8d\x95\xf2\x8cKV0\x7f`\xf4\xcaU\xeb\xa6a\xeb\xbar\xac\x80\x8f\xa8\xc4\x9e&x\x8e\xd0J]`l\xb4\x18\xdet\x87\x8b\x9a"\xf8\xef)Y\x0b\xc4\xebW\xc9\xfa\xf7\xc4\x15$\xa8\x85\xb8\x97\x9cB?/\x8f\x8e\x05\x92\xa9\x87\x92\x01\xbe\x7f\xf9wz\x16*\xb8\x10\xfe\xb3$\xbat\xc4\xc1V\xe0M9\tr\te:\xc3>Z_-\x88d'
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EEA2_testset_5():
    aes3gpp = AES_3GPP()
    key     = b'\x96\x18\xaeF\x89\x1f\x86W\x8e\xeb\xe9\x0e\xf7\xa1 .'
    count   = 0xc675a64b 
    bearer  = 0xc
    direct  = 1
    data    = b'\x8d\xaa\x17\xb1\xae\x05\x05)\xc6\x82\x7f(\xc0\xefj\x12B\xe9?\x8b1O\xb1\x8aw\xf7\x90\xae\x04\x9f\xed\xd6\x12&\x7f\xec\xae\xfcE\x01t\xd7m\x9f\x9a\xa7uZ0\xcd\x90\xa9\xa5\x87K\xf4\x8e\xafp\xee\xa3\xa6*%\n\x8bk\xd8\xd9\xb0\x8b\x08\xd6N2\xd1\x81ww\xfbTMI\xcdIr\x0e!\x9d\xbf\x8b\xbe\xd39\x04\xe1\xfd@\xa4\x1d7\n\x1fetP\x95h}G\xba\x1d6\xd24\x9e#\xf6D9,\x8e\xa9\xc4\x9d@\xc12q\xaf\xf2d\xd0\xf2HA\xd6F_\t\x96\xff\x84\xe6_\xc5\x17\xc5>\xfc3c\xc3\x84\x92\xa8'
    bitlen  = 1245
    output  = b'\x91\x9c\x8c3\xd6g\x89p=\x05\xa0\xd7\xce\x82\xa2\xae\xacN\xe7l\x0fM\xa0P3^\x8a\x84\xe7\x89{\xa5\xdf/6\xbdQ>=\x0c\x85x\xc7\xa0\xfc\xf0C\xe0:\xa3\xa3\x9f\xba\xad}\x15\xbe\x07O\xaa]\x90)\xf7\x1f\xb4W\xb6G\x83G\x14\xb0\xe1\x8f\x11\x7f\xca\x10gyE\tl\x8c_2k\xa8\xd6\t^\xb2\x9c>6\xcf$]\x16"\xaa\xfe\x92\x1fuf\xc4\xf5\xd6D\xf2\xf1\xfc\x0e\xc6\x84\xdd\xb2\x13Itv"\xe2\t)]\'\xff?\x95b3q\xd4\x9b\x14|\n\xf4\x86\x17\x1f"\xcd\x04\xb1\xcb\xeb&X">i8'
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EEA2_testset_6():
    aes3gpp = AES_3GPP()
    key     = b'T\xf4\xe2\xe0L\x83xn\xec\x8f\xb5\xab\xe8\xe3ef'
    count   = 0xaca4f50f
    bearer  = 0xb
    direct  = 0
    data    = b"@\x98\x1b\xa6\x82L\x1b\xfbB\x86\xb2\x99x=\xafD,\t\x9fz\xb0\xf5\x8d\\\x8eF\xb1\x04\xf0\x8f\x01\xb4\x1a\xb4\x85G )\xb7\x1d6\xbd\x1a=\x90\xdc:A\xb4mQg*\xc4\xc9f:+\xe0c\xdaK\xc8\xd2\x80\x8c\xe3>,\xcc\xbf\xc64\xe1\xb2Y\x06\x08v\xa0\xfb\xb5\xa47\xeb\xcc\x8d1\xc1\x9eDT1\x87E\xe3\xfa\x16\xbb\x11\xad\xae$\x88y\xfeR\xdb%C\xe5<\xf4E\xd3\xd8(\xce\x0b\xf5\xc5`Y=\x97'\x8aYv-\xd0\xc2\xc9\xcdh\xd4Ijy%\x08a@\x14\xb1;j\xa5\x11(\xc1\x8c\xd6\xa9\x0b\x87\x97\x8c/\xf1\xca\xbe}\x9f\x89\x8aA\x1b\xfd\xb8Oh\xf6r{\x14\x99\xcd\xd3\r\xf0D:\xb4\xa6fS3\x0b\xcb\xa1\x10^L\xec\x03Ls\xe6\x05\xb41\x0e\xaa\xad\xcf\xd5\xb0\xca'\xff\xd8\x9d\x14M\xf4y'YB|\x9c\xc1\xf8\xcd\x8c\x87 #d\xb8\xa6\x87\x95L\xb0Z\x8dN-\x99\xe7=\xb1`\xde\xb1\x80\xad\x08A\xe9gA\xa5\xd5\x9f\xe4\x18\x9f\x15B\x00&\xfeL\xd1!\x04\x93/\xb3\x8fsS@C\x8a\xaf~\xcao\xd5\xcf\xd3\xa1\x95\xceZ\xbee'*\xf6\x07\xad\xa1\xbee\xa6\xb4\xc9\xc0i24\t,M\x01\x8f\x17V\xc6\xdb\x9d\xc8\xa6\xd8\x0b\x88\x818akh\x12b\xf9T\xd0\xe7q\x17Hx\r\x92)\x1d\x86)\x99r\xdbt\x1c\xfaO7\xb8\xb5l\xdb\x18\xa7\xca\x82\x18\xe8nKKqjM\x047\x1f\xbe\xc2b\xfcZ\xd0\xb3\x81\x9b\x18{\x97\xe5[\x1aM|\x19\xee$\xc8\xb4\xd7r<\xfe\xdf\x04[\x8a\xca\xe4\x86\x95\x17\xd8\x0ePa]\x905\xd5\xd9\xc5\xa4\n\xf6\x02(\x0bT%\x97\xb0\xcb\x18a\x9e\xeb5\x92WY\xd1\x95\xe1\x00\xe8\xe4\xaa\x0c8\xa3\xc2\xab\xe0\xf3\xd8\xff\x04\xf3\xc3<)Pi\xc26\x94\xb5\xbb\xea\xcd\xd5B\xe2\x8e\x8a\x94\xed\xb9\x11\x9fA-\x05K\xe1\xfar\x00\xb0\x90\x00"
    bitlen  = 3861
    output  = b'\\\xb7,n\xdc\x87\x8f\x15f\xe1\x02S\xaf\xc3d\xc9\xfaT\r\x91M\xb9L\xbe\xe2u\xd0\x91|\xa6\xaf\rw\xac\xb4\xef;\xbe\x1ar+.\xf5\xbd\x1dK\x8e*\xa5\x02N\xc18\x8a \x1e{\xcey \xae\xc6\x15\x89_v:Ud\xdc\xc4\xc4\x82\xa2\xee\x1d\x8b\xfe\xccD\x98\xec\xa8?\xbbu\xf9\xabS\x0e\r\xaf\xbe\xde/\xa5\x89[\x82\x99\x1bbw\xc5)\xe0\xf2R\x9d\x7fy`k\xe9g\x06)m\xed\xfa\x9dt\x12\xb6\x16\x95\x8c\xb5c\xc6x\xc0(%\xc3\r\n\xeew\xc4\xc1F\xd2vT\x12B\x1a\x80\x8d\x13\xce\xc8\x19iLu\xadW.\x9b\x97=\x94\x8b\x81\xa93|;*\x17\x19."\xc2\x06\x9f~\xd1\x16*\xf4L\xde\xa8\x17`6e\xe8\x07\xce@\xc8\xe0\xdd\x9dc\x94\xdcn1\x15?\xe1\x95\\G\xaf\xb5\x1f&\x17\xee\x0c^;\x8e\xf1\xadut\xed4>\xdc\'C\xcc\x94\xc9\x90\xe1\xf1\xfd&BS\xc1x\xde\xa79\xc0\xbe\xfe\xeb\xcd\x9f\x9bv\xd4\x9c\x10\x15\xc9\xfe\xcfP\xe5;\x8bR\x04\xdb\xcd>\xed\x868U\xda\xbc\xdc\xc9K1\xe3\x18\x02\x15h\x85\\\x8b\x9eR\xa9\x81\x95z\x11(\'\xf9x\xba\x96\x0f\x14G\x91\x1b1{U\x11\xfb\xcc\x7f\xb1:\xc1S\xdbt%\x11\x17\xe4\x86\x1e\xb9\xe8;\xff\xff\xc4\xebwUW\x908\xe5y$\xb1\xf7\x8b>\x1a\xd9\x0b\xab*\x07\x87\x1br\xdb^\xef\x96\xc34\x04If\xdb\x0c7\xca\xfd\x1a\x89\xe5dj5\x80\xebde\xf1!\xdc\xe9\xcb\x88\xd8[\x96\xcf#\xcc\xcc\xd4(\x07g\xbe\xe8\xee\xb2=\x86RF\x1d\xb6I1\x03\x00;\xaf\x89\xf5\xe1\x82a\xeaC\xc8J\x92\xeb\xff\xff\xe4\x90\x9d\xc4lQ\x92\xf8%\xf7p`\x0b\x96\x02\xc5W\xb5\xf8\xb41\xa7\x9dE\x97}\xd9\xc4\x1b\x86=\xa9\xe1B\xe9\x00 \xcf\xd0t\xd6\x92{z\xb3\xb6r]\x1ao?\x98\xb9\xc9\xda\xa8\x98*\xff\x06x('
    return aes3gpp.EEA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_1():
    aes3gpp = AES_3GPP()
    key     = b'+\xd6E\x9f\x82\xc5\xb3\x00\x95,I\x10H\x81\xffH'
    count   = 0x38a6f056
    bearer  = 0x18
    direct  = 0
    data    = b'324bc98@'
    bitlen  = 58
    output  = b'\x11\x8cn\xb8'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_2():
    aes3gpp = AES_3GPP()
    key     = b'\xd3\xc5\xd5\x922\x7f\xb1\x1c@5\xc6h\n\xf8\xc6\xd1'
    count   = 0x398a59b4 
    bearer  = 0x1a
    direct  = 1
    data    = b'HE\x83\xd5\xaf\xe0\x82\xae'
    bitlen  = 64
    output  = b'\xb97\x87\xe6'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_3():
    aes3gpp = AES_3GPP()
    key     = b'~^\x94C\x1e\x11\xd78(\xd79\xccl\xedEs'
    count   = 0x36af6144 
    bearer  = 0x18
    direct  = 1
    data    = b'\xb3\xd3\xc9\x17\nN\x162\xf6\x0f\x86\x10\x13\xd2-\x84\xb7&\xb6\xa2x\xd8\x02\xd1\xee\xaf\x13!\xbaY)\xdc'
    bitlen  = 254
    output  = b'\x1f`\xb0\x1d'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_4():
    aes3gpp = AES_3GPP()
    key     = b'\xd3A\x9b\xe8!\x08z\xcd\x02\x12:\x92H\x033Y'
    count   = 0xc7590ea9
    bearer  = 0x17
    direct  = 0
    data    = b'\xbb\xb0W\x03\x88\tIk\xcf\xf8mo\xbc\x8c\xe5\xb15\xa0k\x16`T\xf2\xd5e\xbe\x8a\xceu\xdc\x85\x1e\x0b\xcd\xd8\xf0qA\xc4\x95\x87/\xb5\xd8\xc0\xc6j\x8bm\xa5Vf>NF\x12\x05\xd8E\x80\xbe\xe5\xbc~'
    bitlen  = 511
    output  = b'hF\xa2\xf0'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_5():
    aes3gpp = AES_3GPP()
    key     = b'\x83\xfd#\xa2D\xa7L\xf3X\xda0\x19\xf1r&5'
    count   = 0x36af6144
    bearer  = 0xf
    direct  = 1
    data    = b'5\xc6\x87\x16c<f\xfbu\x0c&he\xd5<\x11\xea\x05\xb1\xe9\xfaI\xc89\x8dH\xe1\xef\xa5\x90\x9d9G\x90(7\xf5\xae\x96\xd5\xa0[\xc8\xd6\x1c\xa8\xdb\xef\x1b\x13\xa4\xb4\xab\xfeO\xb1\x00`E\xb6t\xbbTr\x93\x04\xc3\x82\xbeS\xa5\xaf\x05Uav\xf6\xea\xa2\xef\x1d\x05\xe4\xb0\x83\x18\x1e\xe6t\xcd\xa5\xa4\x85\xf7Mz'
    bitlen  = 768
    output  = b'\xe6W\xe1\x82'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_6():
    aes3gpp = AES_3GPP()
    key     = b'h2\xa6\\\xffDsb\x1e\xbd\xd4\xba&\xa9!\xfe'
    count   = 0x36af6144
    bearer  = 0x18
    direct  = 0
    data    = b'\xd3\xc589bh qwefv 287cb@\x98\x1b\xa6\x82L\x1b\xfb\x1a\xb4\x85G )\xb7\x1d\x80\x8c\xe3>,\xc3\xc0\xb5\xfc\x1f=\xe8\xa6\xdc'
    bitlen  = 383
    output  = b'\xf0f\x8c\x1e'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_7():
    aes3gpp = AES_3GPP()
    key     = b']\n\x80\xd8\x13J\xe1\x96w\x82Kg\x1e\x83\x8a\xf4'
    count   = 0x7827fab2 
    bearer  = 0x5
    direct  = 1
    data    = b"p\xde\xdf-\xc4,\\\xbd:\x96\xf8\xa0\xb1\x14\x18\xb3`\x8dW3`J,\xd3j\xab\xc7\x0c\xe3\x19;\xb5\x15;\xe2\xd3\xc0m\xfd\xb2\xd1n\x9c5qX\xbejA\xd6\xb8a\xe4\x91\xdb?\xbf\xebQ\x8e\xfc\xf0H\xd7\xd5\x89Ss\x0f\xf3\x0c\x9e\xc4p\xff\xcdf=\xc3B\x01\xc3j\xdd\xc0\x11\x1c5\xb3\x8a\xfe\xe7\xcf\xdbX.71\xf8\xb4\xba\xa8\xd1\xa8\x9c\x06\xe8\x11\x99\xa9qb'\xbe4N\xfc\xb46\xdd\xd0\xf0\x96\xc0d\xc3\xb5\xe2\xc3\x99\x99?\xc7s\x94\xf9\xe0\x97 \xa8\x11\x85\x0e\xf2;.\xe0]\x9eas`\x9d\x86\xe1\xc0\xc1\x8e\xa5\x1a\x01*\x00\xbbA;\x9c\xb8\x18\x8ap<\xd6\xba\xe3\x1c\xc6{4\xb1\xb0\x00\x19\xe6\xa2\xb2\xa6\x90\xf0&q\xfe|\x9e\xf8\xde\xc0\tNS7cG\x8dX\xd2\xc5\xf5\xb8'\xa0\x14\x8cYH\xa9i1\xac\xf8OFZd\xe6,\xe7@\x07\xe9\x91\xe3~\xa8#\xfa\x0f\xb2\x19#\xb7\x99\x05\xb73\xb61\xe6\xc7\xd6\x86\n81\xac5\x1a\x9cs\x0cR\xffr\xd9\xd3\x08\xee\xdb\xab!\xfd\xe1C\xa0\xea\x17\xe2>\xdc\x1ft\xcb\xb3c\x8a 3\xaa\xa1Td\xea\xa738]\xbb\xebo\xd75\t\xb8W\xe6\xa4\x19\xdc\xa1\xd8\x90z\xf9w\xfb\xacM\xfa5\xec"
    bitlen  = 2558
    output  = b'\xf4\xcc\x8f\xa3'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output

def aes_EIA2_testset_8():
    aes3gpp = AES_3GPP()
    key     = b'\xb3\x12\x0f\xfd\xb2\xcfj\xf4\xe7>\xaf.\xf4\xeb\xeci'
    count   = 0x296f393c 
    bearer  = 0xb
    direct  = 1
    data    = b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\xe0\x95\x80E\xf3\xa0\xbb\xa4\xe3\x96\x83F\xf0\xa3\xb8\xa7\xc0*\x01\x8a\xe6@vR&\xb9\x87\xc9\x13\xe6\xcb\xf0\x83W\x00\x16\xcf\x83\xef\xbca\xc0\x82Q>!V\x1aB|\x00\x9d(\xc2\x98\xef\xac\xe7\x8e\xd6\xd5l-E\x05\xad\x03.\x9c\x04\xdc`\xe7:\x81im\xa6e\xc6\xc4\x86\x03\xa5{E\xab3"\x15\x85\xe6\x8e\xe3\x16\x91\x87\xfb\x029R\x862\xddel\x80~\xa3$\x8b{F\xd0\x02\xb2\xb5\xc7E\x8e\xb8[\x9c\xe9Xy\xe04\x08Y\x05^;\n\xbb\xc3\xea\xce\x87\x19\xca\xa8\x02e\xc9r\x05\xd5\xdcK\xcc\x90/\xe1\x83\x96)\xedq2\x8a\x0f\x04I\xf5\x88U~h\x98\x86\x0e\x04*\xec\xd8K$\x04\xc2\x12\xc9"-\xa5\xbf\x8a\x89\xefg\x97\x87\x0c\xf5\x07q\xa6\x0ff\xa2\xeeb\x856W\xad\xdf\x04\xcd\xde\x07\xfaAN\x11\xf1+M\x81\xb9\xb4\xe8\xacS\x8e\xa3\x06fh\x8d\x88\x1fl4\x84!\x99/1\xb9O\x88\x06\xed\x8f\xcc\xffL\x91#\xb8\x96BRz\xd6\x13\xb1\t\xbfu\x16t\x85\xf1&\x8b\xf8\x84\xb4\xcd#\xd2\x9a\t4\x92W\x03\xd64\t\x8fwg\xf1\xbet\x91\xe7\x08\xa8\xbb\x94\x9a8sp\x8a\xefJ6#\x9eP\xcc\x08#\\\xd5\xedk\xbeW\x86h\xa1{X\xc1\x17\x1d\x0b\x90\xe8\x13\xa9\xe4\xf5\x8a\x89\xd7\x19\xb1\x10B\xd66\x0b\x1b\x0fR\xde\xb70\xa5\x8dX\xfa\xf4c\x15\x95K\n\x87&\x91GYw\xdc\x88\xc0\xd73\xfe\xffT`\n\x0c\xc1\xd00\n\xaa\xeb\x94W,n\x95\xb0\x1a\xe9\r\xe0O\x1d\xceG\xf8~\x8f\xa7\xbe\xbfw\xe1\xdb\xc2\rk\xa8\\\xb9\x14=Q\x8b(]\xfa\x04\xb6\x98\xbf\x0c\xf7\x81\x9f \xfaz(\x8e\xb0p=\x99\\Y\x94\x0c|f\xdeW\xa9\xb7\x0f\x827\x9bp\xe2\x03\x1eE\x0f\xcf\xd2\x18\x13&\xfc\xd2\x8d\x88#\xba\xaa\x80\xdfn\x0fD5Ydu9\xfd\x89\x07\xc0\xff\xd9\xd7\x9c\x13\x0e\xd8\x1c\x9a\xfd\x9b~\x84\x8c\x9f\xed8D=]8\x0eS\xfb\xdb\x8a\xc8\xc3\xd3\xf0hv\x05O\x12$a\x10}\xe9/\xea\t\xc6\xf6\x92:\x18\x8dS\xaf\xe5J\x10\xf6\x0en\x9dZ\x03\xd9\x96\xb5\xfb\xc8 \xf8\xa67\x11j\'\xad\x04\xb4D\xa0\x93-\xd6\x0f\xbd\x12g\x1c\x11\xe1\xc0\xecs\xe7\x89\x87\x9f\xaa=B\xc6M \xcd\x12Rt*7h\xc2Z\x90\x15\x85\x88\x8e\xce\xe1\xe6\x12\xd9\x93k@;\x07u\x94\x9af\xcd\xfd\x99\xa2\x9b\x13E\xba\xa8\xd9\xd5@\x0c\x91\x02K\n`sc\xb0\x13\xce]\xe9\xae\x86\x9d;\x8d\x95\xb0W\x0b<-9\x14"\xd3$P\xcb\xcf\xae\x96e"\x86\xe9m\xec\x12\x14\xa94e\'\x98\n\x81\x92\xea\xc1\xc3\x9a:\xafo\x155\x1d\xa6\xbevM\xf8\x97r\xec\x04\x07\xd0nD\x15\xbe\xfa\xe7\xc9%\x80\xdf\x9b\xf5\x07I|\x8f)\x95\x16\rN!\x8d\xaa\xcb\x02\x94J\xbf\x834\x0c\xe8\xbe\x16\x86\xa9`\xfa\xf9\x0e-\x90\xc5\\\xc6G[\xab\xc3\x17\x1a\x80\xa3c\x17IT\x95]q\x01\xda\xb1j\xe8\x17\x91g\xe2\x14D\xb4C\xa9\xea\xaa|\x91\xde6\xd1\x18\xc3\x9d8\x9f\x8d\xd4F\x9a\x84l\x9a&+\xf7\xfa\x18Hzy\xe8\xde\x11i\x9e\x0b\x8f\xdfU|\xb4\x87\x19\xd4S\xbaq0V\x10\x9b\x93\xa2\x18\xc8\x96u\xac\x19_\xb4\xfb\x06c\x9b7\x97\x14IU\xb3\xc92}\x1a\xec\x00=B\xec\xd0\xea\x98\xab\xf1\x9f\xfbJ\xf3V\x1ag\xe7|5\xbf\x15\xc5\x9c$\x12\xda\x88\x1d\xb0+\x1b\xfb\xce\xbf\xacQR\xbc\x99\xbc?\x1d\x15\xf7q\x00\x1bp)\xfe\xdb\x02\x8f\x8b\x85+\xc4@~\xb8?\x89\x1c\x9c\xa73%O\xdd\x1e\x9e\xdbV\x91\x9c\xe9\xfe\xa2\x1c\x17@rR\x1c\x181\x9aT\xb5\xd4\xef\xbe\xbd\xdf\x1d\x8bi\xb1\xcb\xf2_H\x9f\xcc\x98\x13rT|\xf4\x1d\x00\x8e\xf0\xbc\xa1\x92o\x93Ks^\t\x0b;%\x1e\xb3:6\xf8.\xd9\xb2\x9c\xf4\xcb\x94A\x88\xfa\x0e\x1e8\xddw\x8f}\x1c\x9d\x98{(\xd12\xdf\xb9s\x1f\xa4\xf4\xb4\x16\x93[\xe4\x9d\xe3\x05\x16\xaf5xX\x1f/\x13\xf5a\xc0f3a\x94\x1e\xab$\x9aK\xc1#\xf8\xd1\\\xd7\x11\xa9V\xa1\xbf \xfen\xb7\x8a\xea#s6\x1d\xa0Bly\xa50\xc3\xbb\x1d\xe0\xc9\x97"\xef\x1f\xde9\xac+\x00\xa0\xa8\xee|\x80\n\x08\xbc"d\xf8\x9fN\xff\xe6\'\xac/\x051\xfbUOm!\xd7LY\np\xad\xfa\xa3\x90\xbd\xfb\xb3\xd6\x8eF!\\\xab\x18}#h\xd5\xa7\x1f^\xbe\xc0\x81\xcd; \xc0\x82\xdb\xe4\xcd/\xac\xa2\x87sy]k\x0c\x10 Ke\x9a\x93\x9e\xf2\x9b\xbe\x10\x88$6$B\x99\'\xa7\xebWm\xd3\xa0\x0e\xa5\xe0\x1a\xf5\xd4u\x83\xb2\',\x0c\x16\x1a\x80e!\xa1o\xf9\xb0\xa7"\xc0\xcf&\xb0%\xd5\x83n"X\xa4\xf7\xd4w:\xc8\x01\xe4&;\xc2\x94\xf4=\xef\x7f\xa8p?:A\x97F5%\x88vR\xb0\xb2\xa4\xa2\xa7\xcf\x87\xf0\t\x14\x87\x1e%\x03\x91\x13\xc7\xe1a\x8d\xa3@d\xb5zC\xc4c$\x9f\xb8\xd0^\x0f&\xf4\xa6\xd8Ir\xe7\xa9\x05H$\x14_\x91)\\\xdb\xe3\x9ao\x92\x0f\xac\xc6Yq+F\xa5K\xa2\x95\xbb\xe6\xa9\x01T\xe9\x1b3\x98Z+\xcdB\n\xd5\xc6~\xc9\xad\x8e\xb7\xachd\xdb\'*Qk\xc9L(9\xb0\xa8\x16\x9ak\xf5\x8e\x1a\x0c*\xda\x8c\x88;{\xf4\x97\xa4\x91q&\x8e\xd1]\xdd)i8N\x7f\xf4\xbfJ\xab.\xc9\xec\xc6R\x9c\xf6)\xe2\xdf\x0f\x08\xa7ze\xaf\xa1*\xa9\xb5\x05\xdf\x8b(~\xf6\xcc\x91I=\x1c\xaa9\x07n(\xef\x1e\xa0(\xf5\x11\x8d\xe6\x1a\xe0+\xb6\xae\xfc3C\xa0P)/\x19\x9f@\x18W\xb2\xbe\xad^n\xe2\xa1\xf1\x91\x02/\x92x\x01o\x04w\x91\xa9\xd1\x8d\xa7\xd2\xa6\xd2\x7f.\x0eQ\xc2\xf6\xea0\xe8\xacI\xa0`OL\x13T.\x85\xb6\x83\x81\xb9\xfd\xcf\xa0\xceK-4\x13T\x85-6\x02E\xc56\xb6\x12\xafq\xf3\xe7|\x90\x95\xae-\xbd\xe5\x04\xb2es=\xab\xfe\x10\xa2\x0f\xc7\xd6\xd3,!\xcc\xc7+\x8b4D\xaef=e\x92-\x17\xf8,\xaa+\x86\\\xd8\x89\x13\xd2\x91\xa6X\x99\x02n\xa12\x849r<\x19\x8c6\xb0\xc3\xc8\xd0\x85\xbf\xaf\x8a2\x0f\xde3KJI\x19\xb4L+\x95\xf6\xe8\xec\xf73\x93\xf7\xf0\xd2\xa4\x0e`\xb1\xd4\x06Rk\x02-\xdc3\x18\x10\xb1\xa5\xf7\xc3G\xbdS\xed\x1f\x10]j\r0\xab\xa4w\xe1x\x88\x9a\xb2\xecU\xd5X\xde\xab&0 C6\x96+M\xb5\xb6c\xb6\x90+\x89\xe8[1\xbcj\xf5\x0f\xc5\n\xcc\xb3\xfb\x9bW\xb6c)p17\x8d\xb4x\x96\xd7\xfb\xafl`\n\xdd,g\xf96\xdb\x03y\x86\xdb\x85n\xb4\x9c\xf2\xdb?}\xa6\xd26P\xe48\xf1\x88@A\xb0\x13\x11\x9eL*\xe5\xaf7\xcc\xcd\xfbhf\x078\xb5\x8b<Y\xd1\xc0$\x847G*\xba\x1f5\xca\x1f\xb9\x0c\xd7\x14\xaa\x9fcU4\xf4\x9e|[\xba\x81\xc2\xb6\xb3o\xde\xe2\x1c\xa2~4\x7fy=,\xe9D\xed\xb2<\x8c\x9b\x91K\xe1\x035\xe3P\xfe\xb5\x07\x03\x94\xb7\xa4\xa1\\\x0c\xa1 (5h\xb7\xbf\xc2T\xfe\x83\x8b\x13z!G\xce|\x11::MeI\x9d\x9e\x86\xb8}\xbc\xc7\xf0;\xbd::\xb1\xaa$>\xce[\xa9\xbc\xf2_\x82\x83l\xfeG;-\x83\xe7\xa7 \x1c\xd0\xb9jrE\x1e\x86?l;\xa6d\xa6\xd0s\xd1\xf7\xb5\xed\x99\x08e\xd9x\xbd8\x15\xd0`\x94\xfc\x9a*\xbaR!\xc2-Z\xb9\x968\x9e7!\xe3\xaf_\x05\xbe\xdd\xc2\x87^\r\xfa\xeb9\x02\x1e\xe2zA\x18|\xbbE\xef@\xc3\xe7;\xc09\x89\xf9\xa3\r\x12\xc5K\xa7\xd2\x14\x1d\xa8\xa8uI>ewn\xf3_\x97\xde\xbc"\x86\xccJ\xf9\xb4b>\xee\x90/\x84\x0cR\xf1\xb8\xade\x899\xae\xf7\x1f?r\xb9\xec\x1d\xe2\x15\x88\xbd5HN\xa4D64?\xf9^\xadj\xb1\xd8\xaf\xb1\xb2\xa3\x03\xdf\x1bq\xe5<J\xeak.>\x93r\xbe\r\x1b\xc9\x97\x98\xb0\xce<\xc1\r*YmV]\xba\x82\xf8\x8c\xe4\xcf\xf3\xb3=]$\xe9\xc0\x83\x11$\xbf\x1a\xd5Ky%2\x98=\xd6\xc3\xa8\xb7\xd0'
    bitlen  = 16448
    output  = b'\xeb\xd5\xcc\xb0'
    return aes3gpp.EIA2(key, count, bearer, direct, data, bitlen) == output


def aes_testsets():
    return aes_EEA2_testset_1() & aes_EEA2_testset_2() & \
            aes_EEA2_testset_3() & aes_EEA2_testset_4() & \
            aes_EEA2_testset_5() & aes_EEA2_testset_6() & \
            aes_EIA2_testset_1() & aes_EIA2_testset_2() & \
            aes_EIA2_testset_3() & aes_EIA2_testset_4() & \
            aes_EIA2_testset_5() & aes_EIA2_testset_6() & \
            aes_EIA2_testset_7() & aes_EIA2_testset_8()


def testall():
    if _with_aes:
        return kasumi_testsets() & snow3g_testsets() & zuc_testsets() & aes_testsets()
    else:
        return kasumi_testsets() & snow3g_testsets() & zuc_testsets()


def testperf():
    T0 = time()
    for i in range(300):
        if not testall():
            print('testset failing... exiting')
            return
    print('300 full CM testsets in %.3f seconds' % (time()-T0, ))


def test_CM():
    assert( testall() )


if __name__ == '__main__':
    testperf()
